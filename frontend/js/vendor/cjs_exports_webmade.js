// This file was generated by modules-webmake (modules for web) project
// see: https://github.com/medikoo/modules-webmake

(function (modules) {
	var getModule, getRequire, require;
	getModule = (function (wrap) {
		return function (scope, tree, path, fullpath) {
			var name, dir, exports = {}, module = { exports: exports }, fn;
			path = path.split('/');
			name = path.pop();
			while ((dir = path.shift())) {
				if (dir === '..') {
					scope = tree.pop();
				} else if (dir !== '.') {
					tree.push(scope);
					scope = scope[dir];
				}
			}
			if (scope[name + '.js']) {
				name += '.js';
			}
			if (typeof scope[name] === 'object') {
				tree.push(scope);
				scope = scope[name];
				name = 'index.js';
			}
			fn = scope[name];
			if (!fn) {
				throw new Error("Could not find module '" + fullpath + "'");
			}
			scope[name] = wrap(module);
			fn.call(exports, exports, module, getRequire(scope, tree));
			return module.exports;
		};
	})(function (cmodule) {
		return function (ignore, module) {
			module.exports = cmodule.exports;
		};
	});
	require = function (scope, tree, fullpath) {
		var name, path = fullpath, t = fullpath[0];
		if (t === '/') {
			path = path.slice(1);
			scope = modules['/']; tree = [];
		} else if (t !== '.') {
			name = path.split('/', 1)[0];
			scope = modules[name]; tree = [];
			path = path.slice(name.length + 1) || scope[':mainpath:'];
		}
		return getModule(scope, tree, path, fullpath);
	};
	getRequire = function (scope, tree) {
		return function (path) {
			return require(scope, [].concat(tree), path);
		};
	};
	return getRequire(modules, []);
})
({
	"clock": {
		":mainpath:": "lib/index",
		"lib": {
			"next-tick.js": function (exports, module, require) {
				// Perform task in future turn of event loop.

				'use strict';

				var global = require('es5-ext/lib/global');

				module.exports = (global.process && process.nextTick) || function (f) {
					setTimeout(f, 0);
				};
			}
		}
	},
	"deferred": {
		":mainpath:": "lib/index",
		"lib": {
			"async-to-promise.js": function (exports, module, require) {
				// Return promise for given async function

				'use strict';

				var f      = require('es5-ext/lib/Function/functionalize')
				  , concat = require('es5-ext/lib/List/concat').call
				  , slice  = require('es5-ext/lib/List/slice/call')

				  , deferred  = require('./deferred')

				  , apply;

				apply = function (fn, scope, args, resolve) {
					fn.apply(scope, concat(args, function (error, result) {
						if (error == null) {
							resolve((arguments.length > 2) ? slice(arguments, 1) : result);
						} else {
							resolve(error);
						}
					}));
				}

				exports = module.exports = f(function () {
					var d = deferred();
					apply(this, null, arguments, d.resolve);
					return d.promise;
				});

				exports._apply = apply;
			},
			"base.js": function (exports, module, require) {
				// Default ports for deferred

				'use strict';

				var base

				base = {
					promise: {},
					resolved: {},
					unresolved: {}
				};

				exports.get = function () {
					return base;
				};

				exports.add = function (name, promise, resolved) {
					base.promise[name] = promise;
					base.resolved[name] = resolved;
					base.unresolved[name] = function () {
						this._pending.push([name, arguments]);
					};
				};
			},
			"deferred.js": function (exports, module, require) {
				'use strict';

				var defineProperty   = Object.defineProperty
				  , push             = require('es5-ext/lib/Array/push/apply')
				  , isError          = require('es5-ext/lib/Error/is-error')
				  , throwError       = require('es5-ext/lib/Error/throw')
				  , isFunction       = require('es5-ext/lib/Function/is-function')
				  , noop             = require('es5-ext/lib/Function/noop')
				  , curry            = require('es5-ext/lib/Function/curry').call
				  , sequence         = require('es5-ext/lib/Function/sequence').call
				  , silent           = require('es5-ext/lib/Function/silent').bind
				  , c                = require('es5-ext/lib/Object/descriptors/c')
				  , v                = require('es5-ext/lib/Object/descriptors/v')
				  , create           = require('es5-ext/lib/Object/plain/create')
				  , merge            = require('es5-ext/lib/Object/plain/merge').call
				  , nextTick         = require('clock/lib/next-tick')

				  , isPromise        = require('./is-promise')
				  , base             = require('./base').get()

				  , createPromise, createDeferred, promise, resolved, unresolved, deferred;

				createPromise = function (base, props) {
					var p = function (win, fail) {
						var d = createDeferred();
						p._base.then(win, fail, d.resolve);
						return d.promise;
					};
					return create(base, props)._link(merge((p.then = p), promise));
				};

				promise = merge(base.promise, {
					end: function (handler) {
						this._base.end(handler);
						return this;
					},
					valueOf: function () {
						return this._base._resolved ? this._base._value : this;
					}
				});

				resolved = merge(base.resolved, {
					then: function (win, fail, resolve) {
						var cb = this._failed ? fail : win;
						nextTick(isFunction(cb) ? sequence(silent(cb, this._value), resolve) :
							curry(resolve, (cb == null) ? this._promise : cb));
					},
					end: function (handler) {
						if (this._failed) {
							nextTick(
								isFunction(handler) ? curry(handler, this._value) :
									throwError.bind(this._value));
						}
					},
					_resolved: true,
					_link: function (promise) {
						var old, dscr;
						dscr = v(this);
						old = promise._base;
						this._promise = promise;
						defineProperty(promise, '_base', dscr);
						if (old) {
							clearTimeout(old._timeout);
							if (old._monitor) {
								clearTimeout(old._monitor);
							}
							old._promises.forEach(function (promise) {
								defineProperty(promise, '_base', dscr);
							}, this);
							old._pending.forEach(function (data) {
								this[data[0]].apply(this, data[1]);
							}, this);
							delete old._pending;
							delete old._promises;
						}
						return promise;
					}
				});

				unresolved = merge(base.unresolved, {
					then: function (win, fail, resolve) {
						this._pending.push(['then', arguments]);
					},
					end: function (handler) {
						this._pending.push(['end', arguments]);
					},
					_resolved: false,
					_link: function (promise) {
						var old, dscr;
						dscr = c(this);
						if ((old = promise._base)) {
							clearTimeout(old._timeout);
							if (old._monitor) {
								clearTimeout(old._monitor);
							}
							old._promises.forEach(function (promise) {
								defineProperty(promise, '_base', dscr);
								this._promises.push(promise);
							}, this);
							push(this._pending, old._pending);
							delete old._pending;
							delete old._promises;
						}
						this._promises.push(promise);
						defineProperty(promise, '_base', dscr);
						return promise;
					}
				});

				deferred = {
					resolved: false,
					resolve: function (value) {
						var newBase, oldBase, reset, pending;
						if (this.resolved) {
							throw new Error("Promise is already resolved");
						}
						this.resolved = true;
						if (isPromise(value)) {
							newBase = value._base;
						} else {
							newBase = create(resolved, {
								_value: value,
								_failed: isError(value)
							});
						}
						return newBase._link(this.promise);
					}
				};

				module.exports = createDeferred = function (value) {
					var o;
					if (arguments.length) {
						if (value && isPromise(value)) {
							return value;
						}
						return createPromise(resolved, {
							_value: value,
							_failed: isError(value)
						});
					}

					o = create(deferred, {
						promise: createPromise(unresolved, {
							_pending: [],
							_promises: [],
							_timeout: setTimeout(noop, 1e13),
							_monitor: createDeferred.MONITOR && createDeferred.MONITOR()
						})
					});

					return {
						resolve: o.resolve.bind(o),
						promise: o.promise
					};
				};
			},
			"delay.js": function (exports, module, require) {
				// Delay function execution, return promise for function result

				'use strict';

				var f        = require('es5-ext/lib/Function/functionalize')
				  , silent   = require('es5-ext/lib/Function/silent').call

				  , deferred = require('./deferred');

				module.exports = function (timeout) {
					return f(function () {
						var fn = this, args = arguments;
						var d = deferred();
						setTimeout(function () {
							d.resolve(silent(fn, args));
						}, timeout);
						return d.promise;
					});
				};
			},
			"ext": {
				"_fn.js": function (exports, module, require) {
					'use strict';

					var toArray  = require('es5-ext/lib/List/to-array').call
					  , base     = require('../base')

					  , deferred = require('../deferred')

					module.exports = function (name, fn) {
						base.add(name, function () {
							var d = deferred();
							this._base[name](arguments, d.resolve);
							return d.promise;
						}, function (args, resolve) {
							if (this._failed) {
								resolve(this._promise);
							} else {
								resolve(fn.apply(null, [this._value].concat(toArray(args))));
							}
						});
					};

				},
				"all.js": function (exports, module, require) {
					'use strict';

					require('./_fn')('all', require('../join/all'));
				},
				"cb.js": function (exports, module, require) {
					'use strict';

					var curry      = require('es5-ext/lib/Function/curry').call
					  , nextTick   = require('clock/lib/next-tick');

					require('../base').add('cb', function (cb) {
						this._base.cb(cb);
					}, function (cb) {
						nextTick(this._failed ? curry(cb, this._value, null) :
							curry(cb, null, this._value));
					});
				},
				"first.js": function (exports, module, require) {
					'use strict';

					require('./_fn')('first', require('../join/first'));
				},
				"get.js": function (exports, module, require) {
					'use strict';

					var curry    = require('es5-ext/lib/Function/curry').call
					  , nextTick = require('clock/lib/next-tick')

					  , deferred    = require('../deferred');

					require('../base').add('get', function (name) {
						var d = deferred();
						this._base.get(name, d.resolve);
						return d.promise;
					}, function (name, resolve) {
						nextTick(curry(resolve, this._value[name]));
					});
				},
				"invoke-async.js": function (exports, module, require) {
					'use strict';

					var isFunction = require('es5-ext/lib/Function/is-function')
					  , slice      = require('es5-ext/lib/List/slice/call')
					  , a2p        = require('../async-to-promise')._apply

						, deferred    = require('../deferred');

					require('../base').add('invokeAsync', function (name) {
						var d = deferred();
						this._base.invokeAsync(name, slice(arguments, 1), d.resolve);
						return d.promise;
					}, function (name, args, resolve) {
						var fn;
						if (this._failed) {
							resolve(this._promise);
							return;
						}
						if (isFunction(name)) {
							fn = name;
						} else if (!isFunction(this._value[name])) {
							resolve(new Error("Cannot invoke '" + name +
								"' on given result. It's not a function."));
							return;
						} else {
							fn = this._value[name];
						}
						a2p(fn, this._value, args, resolve);
					});
				},
				"invoke.js": function (exports, module, require) {
					'use strict';

					var isFunction = require('es5-ext/lib/Function/is-function')
					  , curry      = require('es5-ext/lib/Function/curry').call
					  , silent     = require('es5-ext/lib/Function/silent').apply
					  , slice      = require('es5-ext/lib/List/slice/call')
					  , nextTick   = require('clock/lib/next-tick')

					  , deferred    = require('../deferred');

					require('../base').add('invoke', function (name) {
						var d = deferred();
						this._base.invoke(name, slice(arguments, 1), d.resolve);
						return d.promise;
					}, function (name, args, resolve) {
						var fn;
						if (this._failed) {
							resolve(this._promise);
							return;
						}
						if (isFunction(name)) {
							fn = name;
						} else if (!isFunction(this._value[name])) {
							resolve(new Error("Cannot invoke '" + name +
								"' on given result. It's not a function."));
							return;
						} else {
							fn = this._value[name];
						}
						nextTick(curry(resolve, silent(fn.bind(this._value), args)));
					});
				},
				"join.js": function (exports, module, require) {
					'use strict';

					require('./_fn')('join', require('../join/default'));
				},
				"match.js": function (exports, module, require) {
					'use strict';

					var isFunction = require('es5-ext/lib/Function/is-function')
					  , match      = require('es5-ext/lib/Function/match').call

					  , deferred   = require('../deferred');

					require('../base').add('match', function (win, fail) {
						var d = deferred();
						this._base.match(win, fail, d.resolve);
						return d.promise;
					}, function (win, fail, resolve) {
						this.then((!this._failed && isFunction(win)) ? match(win) : win, fail,
							resolve);
					});
				}
			},
			"index.js": function (exports, module, require) {
				'use strict';

				var merge = require('es5-ext/lib/Object/plain/merge').call;

				module.exports = merge(require('./deferred'), {
					asyncToPromise: require('./async-to-promise'),
					syncToPromise:  require('./sync-to-promise'),
					delay:          require('./delay'),

					join:           require('./join/default'),
					all:            require('./join/all'),
					first:          require('./join/first')
				});

				require('./ext/all');
				require('./ext/cb');
				require('./ext/first');
				require('./ext/get');
				require('./ext/invoke-async');
				require('./ext/invoke');
				require('./ext/join');
				require('./ext/match');
			},
			"is-promise.js": function (exports, module, require) {
				// Whether given object is a promise

				'use strict';

				var isFunction = require('es5-ext/lib/Function/is-function');

				module.exports = function (o) {
					return isFunction(o) && isFunction(o.then);
				};
			},
			"join": {
				"all.js": function (exports, module, require) {
					// Resolved when all resolved
					// Always succeeds
					// Function will be called only if preceding argument succeed
					// Function will be called with resolved value of preceding argument
					// Value is values of all promises

					'use strict';

					var extend = require('es5-ext/lib/Object/plain/extend').call

					  , base;

					module.exports = function () {
						// console.log('ALL');
						return Object.create(base).init(arguments);
					};

					base = extend(require('./base'), {
						resolveItem: function (_super, i, r) {
							if (r instanceof Error) {
								this.resolved.all = true;
								this.deferred.resolve(r);
							} else {
								_super(this, i, r);
							}
						}
					});
				},
				"base.js": function (exports, module, require) {
					// Base logic for join methods

					'use strict';

					var isFunction   = require('es5-ext/lib/Function/is-function')
					  , isListObject = require('es5-ext/lib/List/is-list-object')
					  , every        = require('es5-ext/lib/List/every/call')
					  , map          = require('es5-ext/lib/List/map/call')
					  , slice        = require('es5-ext/lib/List/slice/call')
					  , reduce       = require('es5-ext/lib/List/reduce/call')
					  , deferred     = require('../deferred')
					  , isPromise    = require('../is-promise')
					  , s2p          = require('../sync-to-promise').call

					  , isIterator;

					isIterator = function (obj) {
						return obj && isFunction(obj.next);
					};

					module.exports = {
						inProgress: 0,
						resolved: false,
						init: function self (args) {
							var iterator, iargs;
							if (isListObject(args[0]) && (args.length === 1)) {
								return self.call(this, args[0]);
							}
							this.values = [];
							this.resolved = [];
							this.deferred = deferred();
							if (isListObject(args[0])) {
								args = reduce(slice(args, 2), function (col, async) {
									return map(col, function (x) {
										return deferred(x)(async);
									});
								}, map(args[0], args[1]));
							} else if (isIterator(args[0])) {
								iterator = args[0]; iargs = slice(args, 1); args = [];
								return s2p(iterator.next.bind(iterator))
								(function self2 (r) {
									if (r) {
										args.push(iargs.reduce(function (r, fn) {
											return deferred(r)(fn);
										}, r));
										return deferred(iterator.next())(self2.bind(this));
									} else {
										this.setup(args);
										return this.deferred.promise;
									}
								}.bind(this));
							}
							this.setup(args);
							return this.deferred.promise;
						},
						setup: function (args) {
							var last;
							if (every(args, function (o, i) {
								if (isPromise(o)) {
									++this.inProgress;
									this.hold(i, o);
								} else if (isFunction(o)) {
									if (isPromise(last)) {
										++this.inProgress;
										this.hold(i, o = last.then(o));
									} else {
										o = last ? o(last) : o();
										if (isPromise(o)) {
											++this.inProgress;
											this.hold(i, o);
										} else {
											this.resolveItem(i, o);
										}
									}
								} else {
									this.resolveItem(i, o);
								}
								last = o;
								return !this.resolved.all;
							}, this)) {

								this.initialized = true;
								if (!this.inProgress) {
									this.resolve();
								}
							}
						},
						hold: function (i, promise) {
							var cb = this.resolveItemAsync.bind(this, i);
							promise(cb, cb);
						},
						resolveItemAsync: function (i, r) {
							if (this.resolved.all || this.resolved[i]) {
								return;
							}
							this.resolveItem(i, r);
							if (!--this.inProgress && this.initialized && !this.resolved.all) {
								this.resolve();
							}
						},
						resolveItem: function (i, r) {
							this.resolved[i] = true;
							this.values[i] = r;
						},
						resolve: function () {
							this.resolved.all = true;
							this.deferred.resolve(this.values);
						}
					};
				},
				"default.js": function (exports, module, require) {
					// Resolved when all resolved
					// Always succeeds
					// Function will be called only if preceding argument succeed
					// Function will be called with resolved value of preceding argument
					// Value is values of all promises

					'use strict';

					var base;

					module.exports = function () {
						return Object.create(base).init(arguments);
					};

					base = require('./base');
				},
				"first.js": function (exports, module, require) {
					// Resolved when first succeeds or all fail
					// Succeeds if any succeeds
					// Functions are never called unless it's first argument
					// Value is value of succeeded argument or last occurred error

					'use strict';

					var extend = require('es5-ext/lib/Object/plain/extend').call

					  , base;

					module.exports = function () {
						return Object.create(base).init(arguments);
					};

					base = extend(require('./base'), {
						resolveItem: function (i, r) {
							if (r instanceof Error) {
								this.lastError = r;
							} else {
								this.resolved.all = true;
								this.deferred.resolve(r);
							}
						},
						resolve: function () {
							this.resolved.all = true;
							this.deferred.resolve(this.lastError);
						}
					});
				}
			},
			"sync-to-promise.js": function (exports, module, require) {
				// Return promise for given sync function

				'use strict';

				var f        = require('es5-ext/lib/Function/functionalize')
				  , silent   = require('es5-ext/lib/Function/silent').apply

				  , deferred = require('./deferred');

				module.exports = f(function () {
					return deferred(silent(this, arguments));
				});
			}
		}
	},
	"es5-ext": {
		":mainpath:": "lib/index",
		"lib": {
			"Array": {
				"clone.js": function (exports, module, require) {
					// Clone array

					'use strict';

					var f = require('../Function/functionalize');

					module.exports = f(function () {
						return [].concat(this);
					});
				},
				"compact.js": function (exports, module, require) {
					// Removes all falsy values.
					//
					// Inspired by: http://documentcloud.github.com/underscore/#compact

					'use strict';

					var f = require('../Function/functionalize');

					module.exports = f(function () {
						var i = this.length - 1;
						for (; i >= 0; --i) {
							if (!this[i]) {
								this.splice(i, 1);
							}
						}
						return this;
					});
				},
				"empty.js": function (exports, module, require) {
					// Empty array

					'use strict';

					var f = require('../Function/functionalize');

					module.exports = f(function () {
						this.splice(0, this.length);
						return this;
					});
				},
				"get-array.js": function (exports, module, require) {
					// If given object is an Array return it, otherwise wrap it with array

					'use strict';

					var isArray = Array.isArray;

					module.exports = function (x) {
						return isArray(x) ? x : ((typeof x === 'undefined') ? [] : [x]);
					};
				},
				"index.js": function (exports, module, require) {
					'use strict';

					module.exports = {
						clone:    require('./clone'),
						compact:  require('./compact'),
						empty:    require('./empty'),
						getArray: require('./get-array'),
						push:     require('./push'),
						remove:   require('./remove'),
						repeat:   require('./repeat'),
						uniq:     require('./uniq')
					};
				},
				"push": {
					"apply.js": function (exports, module, require) {
						// apply binded to Array.prototype.push

						'use strict';

						module.exports = require('../../Function/apply/bind')(Array.prototype.push);
					},
					"index.js": function (exports, module, require) {
						'use strict';

						module.exports = {
							apply: require('./apply')
						};
					}
				},
				"remove.js": function (exports, module, require) {
					// Remove item from an array

					'use strict';

					var f = require('../Function/functionalize');

					module.exports = f(function (item) {
						var index = this.indexOf(item);
						if (index !== -1) {
							this.splice(index, 1);
						}
					});
				},
				"repeat.js": function (exports, module, require) {
					// Create an array built of repeated arguments

					var slice = require('../List/slice/call');

					module.exports = function (length) {
						var arr = slice(arguments, 1, 1 + length), l;
						while ((l = arr.length) < length) {
							arr = arr.concat(arr.slice(0, length - l));
						}
						return arr;
					};
				},
				"uniq.js": function (exports, module, require) {
					// Remove duplicates
					//
					// Name inspired by http://documentcloud.github.com/underscore/#uniq

					'use strict';

					var f = require('../Function/functionalize')

					  , rcb, fcb;

					rcb = function (idxs, item, i) {
						if (this.indexOf(item) !== i) {
							idxs.push(i - idxs.length);
						}
						return idxs;
					};

					fcb = function (i) {
						this.splice(i, 1);
					};

					module.exports = f(function () {
						this.reduce(rcb.bind(this), []).forEach(fcb, this);
						return this;
					});
				}
			},
			"Boolean": {
				"compare.js": function (exports, module, require) {
					// Compare Booleans

					'use strict';

					module.exports = require('../Number/compare');
				},
				"index.js": function (exports, module, require) {
					'use strict';

					module.exports = {
						compare:   require('./compare'),
						isBoolean: require('./is-boolean')
					};
				},
				"is-boolean.js": function (exports, module, require) {
					// Whether object is boolean

					'use strict';

					var toString = require('../Object/to-string/call')

					  , id         = toString(new Boolean(true));

					module.exports = function (x) {
						return (typeof x === 'boolean') || ((typeof x === 'object') &&
							((x instanceof Boolean) || (toString(x) === id)));
					};
				}
			},
			"Date": {
				"clone.js": function (exports, module, require) {
					'use strict';

					var f = require('../Function/functionalize');

					module.exports = f(function () {
						return new Date(this.getTime());
					});
				},
				"compare.js": function (exports, module, require) {
					// Compare to dates

					'use strict';

					var f = require('../Function/functionalize');

					module.exports = f(function (other) {
						return this.getTime() - other.getTime();
					});
				},
				"day": {
					"duration.js": function (exports, module, require) {
						// Duration of a day

						'use strict';

						module.exports = 1000*60*60*24;
					},
					"floor.js": function (exports, module, require) {
						// Floor date to beginning of day

						'use strict';

						var f = require('../../Function/functionalize');

						module.exports = f(function () {
							this.setHours(0, 0, 0, 0);
							return this;
						});
					},
					"index.js": function (exports, module, require) {
						'use strict';

						module.exports = {
							duration: require('./duration'),
							floor:    require('./floor')
						};
					}
				},
				"duration.js": function (exports, module, require) {
					'use strict';

					var f              = require('../Function/functionalize')

					  , merge          = require('../Object/plain/merge').call
					  , bindMethods    = require('../Object/bind-methods').call
					  , pad2           = require('../Number/pad').call(2).call
					  , pad3           = require('../Number/pad').call(3).call
					  , format         = require('../String/format')

					  , c              = require('./clone').call
					  , monthDaysCount = require('./month-days-count').call
					  , dfloor         = require('./day/floor').call
					  , mfloor         = require('./month/floor').call
					  , yfloor         = require('./year/floor').call

					, methods, timeMethods;


					methods = {
						getMilliseconds: function () {
							return this.valueOf();
						},
						getSeconds: function () {
							return Math.floor(this/1000);
						},
						getMinutes: function () {
							return Math.floor(this/(1000*60));
						},
						getHours: function () {
							return Math.floor(this/(1000*60*60));
						},
						getDays: function () {
							return Math.floor(this/(1000*60*60*24));
						},
						getMonths: function () {
							return (this.to.getFullYear() - this.from.getFullYear())*12
								+ this.to.getMonth() - this.from.getMonth()
								- ((this.from - mfloor(c(this.from)))
									> (this.to - mfloor(c(this.to))));
						},
						getYears: function () {
							return this.to.getFullYear() - this.from.getFullYear()
								- ((this.from - yfloor(c(this.from)))
									> (this.to - yfloor(c(this.to))));
						}
					};

					timeMethods = {
						getMilliseconds: function () {
							return this%1000;
						},
						getSeconds: function () {
							return this.getSeconds()%60;;
						},
						getMinutes: function () {
							return this.getMinutes()%60;
						},
						getHours: function () {
							return this.getHours()%24;
						},
						getDays: function () {
							var x = c(this.to);
							x.setMonth(x.getMonth() - 1);
							x = monthDaysCount(x);
							return (x - this.from.getDate() + this.to.getDate())%x
								- ((this.from - dfloor(c(this.from)))
									> (this.to - dfloor(c(this.to))));
						},
						getMonths: function () {
							return (12 - this.from.getMonth() + this.to.getMonth())%12
								- ((this.from - mfloor(c(this.from)))
									> (this.to - mfloor(c(this.to))));
						},
						getYears: function () {
							return this.getYears();
						}
					};

					format = format({
						y: function () {
							return String(this.getYears());
						},
						m: function () {
							return pad2(this.time.getMonths());
						},
						d: function () {
							return pad2(this.time.getDays());
						},
						H: function () {
							return pad2(this.time.getHours());
						},
						M: function () {
							return pad2(this.time.getMinutes());
						},
						S: function () {
							return pad2(this.time.getSeconds());
						},
						L: function () {
							return pad3(this.time.getMilliseconds());
						},
						nm: function () {
							return String(this.getMonths());
						},
						nd: function () {
							return String(this.getDays());
						},
						nH: function () {
							return String(this.getHours());
						},
						nM: function () {
							return String(this.getMinutes());
						},
						nS: function () {
							return String(this.getSeconds());
						},
						nL: function () {
							return String(this.getMilliseconds());
						}
					}).call;

					var toString = function (pattern) {
						var s, r;
						if (!pattern) {
							s = "." +  pad3(this.time.getMilliseconds());
							if (this.getSeconds()) {
								if (this.getMinutes()) {
									s = pad2(this.time.getMinutes()) + ":" + pad2(this.time.getSeconds())
										+ s;
									if (this.getHours()) {
										s = pad2(this.time.getHours()) + ":" + s;
										if (this.getDays()) {
											s = this.time.getDays() + "d " + s;
											if (this.getMonths()) {
												s = this.time.getMonths() + "m " + s;
												if (this.getYears()) {
													s = this.time.getYears() + "y " + s;
												}
											}
										}
									}
								} else {
									s = this.time.getSeconds() + s;
								}
							}
						} else if (pattern === 1) {
							s = this.time.getMilliseconds() + "ms";
							if (this.getSeconds()) {
								s = this.time.getSeconds() + "s " + s;
								if (this.getMinutes()) {
									s = this.time.getMinutes() + "m " + s;
									if (this.getHours()) {
										s = this.time.getHours() + "h " + s;
										if (this.getDays()) {
											s = this.time.getDays() + "d " + s;
											if (this.getMonths()) {
												s = this.time.getMonths() + "m " + s;
												if (this.getYears()) {
													s = this.time.getYears() + "y " + s;
												}
											}
										}
									}
								}
							}
						} else {
							return format(pattern, this);
						}
						return s;
					};

					module.exports = f(function (to) {
						var duration = new Number(to - this);
						duration.from = this;
						duration.to = to;

						merge(duration, methods);
						bindMethods(duration.time = {}, duration, timeMethods);
						duration.toString = toString;

						return duration;
					});
				},
				"format.js": function (exports, module, require) {
					// Formats date into string
					// inspired by Ruby's and Python solutions
					//
					// Y - Year with century, 1999, 2003
					// y - Year without century, 99, 03
					// m - Month, 01..12
					// d - Day of the month, 01..31
					// H - Hour (24-hour clock), 00..23
					// M - Minute, 00..59
					// S - Second, 00..59
					// L - Millisecond, 000..999

					'use strict';

					var f      = require('../Function/functionalize')

					  , pad2   = require('../Number/pad').call(2).call
					  , pad3   = require('../Number/pad').call(3).call

					  , format = require('../String/format')({
							Y: function () {
								return String(this.getFullYear());
							},
							y: function () {
								return String(this.getFullYear()).slice(-2);
							},
							m: function () {
								return pad2(this.getMonth() + 1);
							},
							d: function () {
								return pad2(this.getDate());
							},
							H: function () {
								return pad2(this.getHours());
							},
							M: function () {
								return pad2(this.getMinutes());
							},
							S: function () {
								return pad2(this.getSeconds());
							},
							L: function () {
								return pad3(this.getMilliseconds());
							}
						}).call;

					module.exports = function (pattern) {
						return f(function () {
							return format(pattern, this);
						});
					};
				},
				"index.js": function (exports, module, require) {
					'use strict';

					module.exports = {
						clone:          require('./clone'),
						compare:        require('./compare'),
						day:            require('./day'),
						duration:       require('./duration'),
						format:         require('./format'),
						month:          require('./month'),
						monthDaysCount: require('./month-days-count'),
						isDate:         require('./is-date'),
						year:           require('./year')
					};
				},
				"is-date.js": function (exports, module, require) {
					// Whether object is date
					//
					// Inspired by Node's implementation:
					// https://github.com/TooTallNate/node/commit/bd1d591f3b0b808d5ff58d96aea9db6703b966b9

					'use strict';

					var toString = require('../Object/to-string/call')

					  , id = toString(new Date());

					module.exports = function (x) {
						if (!x) {
							return false;
						}
						return x instanceof Date || (toString(x) === id) || false;
					};


				},
				"month": {
					"floor.js": function (exports, module, require) {
						// Floor date to beginning of month

						'use strict';

						var f        = require('../../Function/functionalize')
						  , dayFloor = require('../day/floor').call;

						module.exports = f(function () {
							dayFloor(this); this.setDate(1);
							return this;
						});
					},
					"index.js": function (exports, module, require) {
						'use strict';

						module.exports = {
							floor: require('./floor')
						};
					}
				},
				"month-days-count.js": function (exports, module, require) {
					'use strict';

					var f = require('../Function/functionalize');

					module.exports = f(function () {
						switch (this.getMonth()) {
							case 1:
							return this.getFullYear()%4 ? 28 : 29;
							case 3:
							case 5:
							case 8:
							case 10:
							return 30;
							default:
							return 31;
						}
					});
				},
				"year": {
					"floor.js": function (exports, module, require) {
						// Floor date to beginning of year

						'use strict';

						var f          = require('../../Function/functionalize')
						  , monthFloor = require('../month/floor').call;

						module.exports = f(function () {
							monthFloor(this); this.setMonth(0);
							return this;
						});
					},
					"index.js": function (exports, module, require) {
						'use strict';

						module.exports = {
							floor: require('./floor')
						};
					}
				}
			},
			"Error": {
				"index.js": function (exports, module, require) {
					'use strict';

					module.exports = {
						isError: require('./is-error'),
						throw:   require('./throw')
					};
				},
				"is-error.js": function (exports, module, require) {
					// Whether object is error

					'use strict';

					var toString = require('../Object/to-string/call')

					  , id = toString(new Error())
					  , exceptionRe = /^\[object [a-zA-z0-9]*Exception\]$/;

					module.exports = function (x) {
						var xid;
						if (!x) {
							return false;
						}
						return (x instanceof Error) || ((xid = toString(x)) === id) ||
							xid.match(exceptionRe) || false;
					};
				},
				"throw.js": function (exports, module, require) {
					// Throw error

					'use strict';

					var f = require('../Function/functionalize');

					module.exports = f(function () {
						throw this;
					});
				}
			},
			"Function": {
				"apply": {
					"bind.js": function (exports, module, require) {
						// Return f.apply binded to f
						//
						// applyBind(f)(args) =def f.apply(args)

						'use strict';

						var apply = Function.prototype.apply
						  , bind  = Function.prototype.bind;

						module.exports = function () {
							return bind.apply(apply, arguments);
						};
					},
					"call.js": function (exports, module, require) {
						// Return f.apply which can be directly called on f
						//
						// applyCall(f, args) =def f.apply(args)

						'use strict';

						var apply = Function.prototype.apply
						  , call  = Function.prototype.call;

						module.exports = function () {
							return call.apply(apply, arguments);
						};
					},
					"index.js": function (exports, module, require) {
						'use strict';

						module.exports = {
							bind: require('./bind'),
							call: require('./call')
						};
					}
				},
				"aritize.js": function (exports, module, require) {
					// Invoking the function returned by this function only passes n arguments to
					// the underlying function. If the underlying function is not saturated, the
					// result is a function that passes all its arguments to the underlying
					// function. (That is, aritize only affects its immediate caller, and not
					// subsequent calls.)
					// aritize is useful to remove optional arguments from a function that is passed
					// to a higher-order function that supplies different optional arguments.
					//
					// aritize(fn, n)(args…) =def  fn(args[0…n])
					//
					// Inspired by: http://osteele.com/sources/javascript/functional/

					'use strict';

					var f     = require('./functionalize')
					  , slice = require('../List/slice/call');

					module.exports = f(function (n) {
						var fn = this;
						return function () {
							return fn.apply(this, slice(arguments, 0, n));
						};
					});
				},
				"bind": {
					"bind.js": function (exports, module, require) {
						// Return f.bind binded to f
						//
						// bindBind(f)(args…) =def  f.bind(args…)

						'use strict';

						var bind  = Function.prototype.bind;

						module.exports = function () {
							return bind.apply(bind, arguments);
						};
					},
					"index.js": function (exports, module, require) {
						'use strict';

						module.exports = {
							bind: require('./bind')
						};
					}
				},
				"call": {
					"bind.js": function (exports, module, require) {
						// Return f.call binded to f
						// callBind(f)(args…) =def  f.call(args)

						'use strict';

						var bind  = Function.prototype.bind
						  , call  = Function.prototype.call;

						module.exports = function () {
							return bind.apply(call, arguments);
						};
					},
					"call.js": function (exports, module, require) {
						// Return f.call binded to f
						// callCall(f, args…) =def  f.call(args)

						'use strict';

						var call  = Function.prototype.call;

						module.exports = call.bind(call);
					},
					"index.js": function (exports, module, require) {
						'use strict';

						module.exports = {
							bind: require('./bind'),
							call: require('./call')
						};
					}
				},
				"clone.js": function (exports, module, require) {
					// Clone function
					// It basically wraps function with other and copies all its properties

					'use strict';

					var f     = require('./functionalize')
					  , merge = require('../Object/merge').call;

					module.exports = f(function () {
						var fn = this;
						var clone = function () {
							return fn.apply(this, arguments);
						};
						return merge(clone, this);
					});
				},
				"curry.js": function (exports, module, require) {
					// Returns a function that, applied to an argument list arg2, applies the
					// underlying function to args ++ arg2.
					// curry(f, args1…)(args2…) =def  f(args1…, args2…)
					//
					// Inspired by: http://osteele.com/sources/javascript/functional/

					'use strict';

					var f       = require('./functionalize')
					  , concat  = require('../List/concat').call
					  , toArray = require('../List/to-array').call;

					module.exports = f(function () {
						var fn   = this
						  , args = arguments;
						return function () {
							return fn.apply(this, concat(args, toArray(arguments)));
						};
					});
				},
				"dscope.js": function (exports, module, require) {
					// Dynamic scope for given function
					// Pollutes global scope for time of function call

					'use strict';

					var f        = require('./functionalize')
					  , global   = require('../global')
					  , reserved = require('../reserved').all

					  , set, unset;

					set = function (scope, cache) {
						Object.keys(scope).forEach(function (key) {
							if (global.hasOwnProperty(key)) {
								cache[key] = global[key];
							}
							global[key] = scope[key];
						});
					};

					unset = function (scope, cache) {
						Object.keys(scope).forEach(function (key) {
							if (cache.hasOwnProperty(key)) {
								global[key] = cache[key];
							} else {
								delete global[key];
							}
						});
					};

					module.exports = f(function (scope) {
						var result, cache = {};
						set(scope, cache); result = this(); unset(scope, cache);
						return result;
					});
				},
				"flip.js": function (exports, module, require) {
					// Returns a function that swaps its first two arguments before passing them to
					// the underlying function.
					// flip(f)(a, b, c…) =def  f(b, a, c…)
					//
					// Inspired by: http://osteele.com/sources/javascript/functional/

					'use strict';

					var f = require('./functionalize');

					module.exports = f(function () {
						var fn = this;
						return function (a, b) {
							var x = a;
							arguments[0] = b; arguments[1] = x;
							return fn.apply(this, arguments);
						};
					});
				},
				"functionalize.js": function (exports, module, require) {
					// Bind function's bind, call and apply methods to itself

					'use strict';

					var bindBind  = require('./bind/bind')
					  , callBind  = require('./call/bind')
					  , applyBind = require('./apply/bind')
					  , toArray, curry, applyArgs, f, count = 0;

					toArray = function (args) {
						return (args.length === 1) ? [args[0]] : Array.apply(null, args);
					};

					curry = function () {
						var fn   = this
						  , args = arguments;
						return f(function () {
							return fn.apply(this, toArray(args).concat(toArray(arguments)));
						});
					};

					applyArgs = function (args) {
						return this.apply(null, args);
					};

					f = module.exports = function (fn) {
						fn.bind = bindBind(fn); fn.call = callBind(fn); fn.apply = applyBind(fn);
						fn.curry = curry.bind(fn); fn.call.applyArgs = applyArgs.bind(fn.call);
						return fn;
					};
				},
				"get-args.js": function (exports, module, require) {
					// Return arguments object

					'use strict';

					module.exports = function () {
						return arguments;
					};
				},
				"get-scope.js": function (exports, module, require) {
					// Return scope in which function was called

					'use strict';

					module.exports = function () {
						return this;
					};
				},
				"hold.js": function (exports, module, require) {
					// Applies the function on n-th call
					// 
					// hold(f, 3, args0…)(args1…)(args2…)(args3…) =def f(args0…, args1…, args2…, args3…)


					'use strict';

					var f     = require('./functionalize')
					  , curry = require('./curry')
					  , slice = require('../List/slice/call')

					  , hold = function hold (fn, n, args) {
							args = args.concat(slice(arguments, 3));
							return n <= 0 ? fn.apply(this, args) : hold.curry(fn, --n, args);
						};

					hold.curry = curry;

					module.exports = f(function (n) {
						if (isNaN(n = Number(n))) {
							n = 2;
						}
						var args = slice(arguments, 1);
						return n <= 0 ? this.apply(null, args) : hold.curry(this, --n, args);
					});
				},
				"i.js": function (exports, module, require) {
					// The identity function
					//
					// I(x) =def  x

					'use strict';

					module.exports = function (x) {
						return x;
					};
				},
				"index.js": function (exports, module, require) {
					// Export all modules.

					'use strict';

					module.exports = {
						apply:         require('./apply'),
						aritize:       require('./aritize'),
						bind:          require('./bind'),
						call:          require('./call'),
						clone:         require('./clone'),
						curry:         require('./curry'),
						dscope:        require('./dscope'),
						flip:          require('./flip'),
						functionalize: require('./functionalize'),
						getArgs:       require('./get-args'),
						getScope:      require('./get-scope'),
						hold:          require('./hold'),
						i:             require('./i'),
						insert:        require('./insert'),
						invoke:        require('./invoke'),
						isArguments:   require('./is-arguments'),
						isFunction:    require('./is-function'),
						k:             require('./k'),
						lock:          require('./lock'),
						log:           require('./log'),
						match:         require('./match'),
						memoize:       require('./memoize'),
						ncurry:        require('./ncurry'),
						noop:          require('./noop'),
						not:           require('./not'),
						once:          require('./once'),
						pluck:         require('./pluck'),
						remove:         require('./remove'),
						rcurry:        require('./rcurry'),
						rncurry:       require('./rncurry'),
						s:             require('./s'),
						sequence:      require('./sequence'),
						silent:        require('./silent')
					};
				},
				"insert.js": function (exports, module, require) {
					// Returns a function that takes an object, and sets given value for
					// object's property

					'use strict';

					module.exports = function (name, value) {
						return function (obj) {
							obj[name] = value;
						};
					};
				},
				"invoke.js": function (exports, module, require) {
					// Returns a function that takes an object as an argument, and applies object's
					// name method to arguments.
					// invoke(name, args…)(object, args2…) =def  object[name](args… args2…)
					//
					// Inspired by: http://osteele.com/sources/javascript/functional/

					'use strict';

					var slice      = require('../List/slice/call')
					  , isFunction = require('./is-function')
					  , memoize    = require('./memoize');

					module.exports = memoize(function (name) {
						var args = slice(arguments, 1)
							, isFn = isFunction(name);

						return function (obj) {
							var fn;
							return (isFn ? name : obj[name]).apply(obj,
								args.concat(slice(arguments, 1)));
						};
					}, false);
				},
				"is-arguments.js": function (exports, module, require) {
					'use strict';

					var toString = require('../Object/to-string/call')

					  , id = '[object Arguments]';

					module.exports = function (x) {
						return toString(x) === id;
					};
				},
				"is-function.js": function (exports, module, require) {
					// Is f a function ?

					'use strict';

					module.exports = function (f) {
						return typeof f === "function";
					};
				},
				"k.js": function (exports, module, require) {
					// Returns a constant function that returns x
					// k(x)(y) =def  x
					//
					// Inspired by: http://osteele.com/sources/javascript/functional/

					'use strict';

					module.exports = function (x) {
						return function () {
							return x;
						};
					};
				},
				"lock.js": function (exports, module, require) {
					// Returns a function that applies the underlying function to args, and ignores
					// its own arguments.
					// lock(fn, args…)(args2…) =def  fn(args…)
					//
					// Inspired by: http://osteele.com/sources/javascript/functional/
					// Naming took from Google's closure

					'use strict';

					var f     = require('./functionalize')
					  , slice = require('../List/slice/call');

					module.exports = f(function () {
						var fn = this
						  , args = arguments;
						return function () {
							return fn.apply(this, args);
						};
					});
				},
				"log.js": function (exports, module, require) {
					// Return wrapper that will log calls of given functions

					'use strict';

					var f = require('./functionalize');

					module.exports = f(function (log) {
						var fn = this;
						return function () {
							log.push(arguments);
							return fn.apply(this, arguments);
						};
					});
				},
				"match.js": function (exports, module, require) {
					// Match first list argument to function arguments
					//
					// matched(f)(args) =def f.apply(null, args);

					'use strict';

					var f = require('../Function/functionalize');

					module.exports = f(function () {
						var fn = this;
						return function (args) {
							return fn.apply(this, args);
						};
					});
				},
				"memoize.js": function (exports, module, require) {
					// Cache function result

					'use strict';

					var isArray  = Array.isArray
					  , slice    = require('../List/slice/call')
					  , isNumber = require('../Number/is-number')

					  , resolve;

					resolve = function (args) {
						return this.map(function (r, i) {
							return r ? r(args[i]) : args[i];
						}).concat(slice(args, this.length));
					};

					module.exports = function (fn, length, resolvers) {
						var cache, resolver;
						cache = [];
						if (isArray(length)) {
							resolvers = length;
							length = fn.length;
						} else if ((length != false) && !isNumber(Number(length)))  {
							length = fn.length;
						}

						resolver = resolvers ? resolve.bind(resolvers) : null;

						return function () {
							var limit, i, index, args, current, found;

							args = resolver ? resolver(arguments) : arguments;
							i = 0;
							index = limit = (length === false) ? args.length: length;
							current = cache;

							if (limit === 0) {
								found = current.hasOwnProperty(0);
							} else {
								while (i !== limit) {
									if (!current[index]) {
										current = (current[index] = [[args[i]], []]);
										index = 0;
									} else if (
										(index = (current = current[index])[0].indexOf(args[i])) === -1) {
										index = current[0].push(args[i]) - 1;
										found = false;
									} else {
										found = current[1].hasOwnProperty(index);
									}
									current = current[1];
									++i;
								}
							}
							if (found) {
								return current[index];
							}
							return current[index] = fn.apply(this, args);
						};
					};
				},
				"ncurry.js": function (exports, module, require) {
					// Same as curry, except only applies the function when all n arguments are
					// saturated.
					//
					// Inspired by: http://osteele.com/sources/javascript/functional/

					'use strict';

					var f     = require('./functionalize')
					  , curry = require('./curry')
					  , slice = require('../List/slice/call')

					  , hold = function hold (fn, n, args) {
							args = args.concat(slice(arguments, 3)).slice(0, n);
							return args.length === n ? fn.apply(this, args) : hold.curry(fn, n, args);
						};

					hold.curry = curry;

					module.exports = f(function (n) {
						return hold.curry(this, n, slice(arguments, 1));
					});
				},
				"noop.js": function (exports, module, require) {
					// No operation function

					'use strict';

					module.exports = function () {};
				},
				"not.js": function (exports, module, require) {
					// Returns a function that returns true when fn() returns false.
					// f.not()(args…) =def  !f(args…)
					//
					// Inspired by http://osteele.com/sources/javascript/functional/

					'use strict';

					var f = require('./functionalize');

					module.exports = f(function () {
						var fn = this;
						return function () {
							return !fn.apply(this, arguments);
						};
					});
				},
				"once.js": function (exports, module, require) {
					// Run function once, ignore later call attempts

					var f       = require('./functionalize')
					  , concat  = require('../List/concat').call
					  , toArray = require('../List/to-array').call

					module.exports = f(function () {
						var fn = this, args = arguments, called;
						return function () {
							if (!called) {
								called = true;
								return fn.apply(this, concat(args, toArray(arguments)));
							}
						};
					});
				},
				"pluck.js": function (exports, module, require) {
					// Returns a function that takes an object, and returns the value of its name
					// property
					// pluck(name)(obj) =def  obj[name]
					//
					// Inspired by: http://osteele.com/sources/javascript/functional/

					'use strict';

					var memoize = require('./memoize');

					module.exports = memoize(function (name) {
						return function (o) {
							return o[name];
						};
					}, 1, [String]);
				},
				"rcurry.js": function (exports, module, require) {
					// Right curry. Returns a function that, applied to an argument list args2,
					// applies the underlying function to args2 + args1.
					//
					// rcurry(f, args1…)(args2…) =def  f(args2…, args1…)
					//
					// Inspired by: http://osteele.com/sources/javascript/functional/

					'use strict';

					var f       = require('./functionalize')
					  , concat  = require('../List/concat').call
					  , toArray = require('../List/to-array').call;

					module.exports = f(function () {
						var fn = this
						  , args = toArray(arguments);
						return function () {
							return fn.apply(this, concat(arguments, args));
						};
					});
				},
				"remove.js": function (exports, module, require) {
					// Returns a function that takes an object, and deletes given
					// object's property

					'use strict';

					var memoize = require('./memoize');

					module.exports = memoize(function (name) {
						return function (obj) {
							delete obj[name];
						};
					});
				},
				"rncurry.js": function (exports, module, require) {
					// Same as rcurry, except only applies the function when all n arguments are
					// saturated.
					//
					// Inspired by: http://osteele.com/sources/javascript/functional/

					'use strict';

					var f = require('./functionalize')
					  , curry = require('./curry')
					  , slice = require('../List/slice/call')

					  , hold = function hold (fn, n, args) {
							args = slice(arguments, 3, 3 + n - args.length).concat(args);
							return args.length === n ? fn.apply(this, args) : hold.curry(fn, n, args);
						};

					hold.curry = curry;

					module.exports = f(function (n) {
						return hold.curry(this, n, slice(arguments, 1).slice(0, n));
					});
				},
				"s.js": function (exports, module, require) {
					// Returns a function that applies the first function to the result of the
					// second, but passes all its arguments too.
					// s(f, g)(args…) =def  f(g(args…), args…)
					//
					// Inspired by: http://osteele.com/sources/javascript/functional/

					'use strict';

					var f       = require('./functionalize')
					  , toArray = require('../List/to-array').call;

					module.exports = f(function (g) {
						var fn = this;
						return function () {
							return fn.apply(this,
								[g.apply(this, arguments)].concat(toArray(arguments)));
						};
					});
				},
				"sequence.js": function (exports, module, require) {
					// Applies the functions in argument-list order.
					// sequence(f1, f2, f3…, fn)(args…) =def  fn(…(f3(f2(f1(args…)))))
					//
					// Inspired by: http://osteele.com/sources/javascript/functional/

					'use strict';

					var f = require('./functionalize')
					  , toArray = require('../List/to-array').call

					  , fn;

					fn = function (result, method) {
						return [method.apply(this, result)];
					};

					module.exports = f(function () {
						var methods = [this].concat(toArray(arguments));
						return function () {
							return methods.reduce(fn.bind(this), arguments)[0];
						};
					});
				},
				"silent.js": function (exports, module, require) {
					// Run function, if function throws than catch exception and return its error
					// otherwise return function result

					'use strict';

					var f = require('./functionalize');

					module.exports = f(function () {
						try {
							return this.apply(null, arguments);
						} catch (e) {
							return e;
						}
					});
				}
			},
			"List": {
				"clone.js": function (exports, module, require) {
					// Clone list (returns Array with same items)

					'use strict';

					var isArray = Array.isArray
					  , f       = require('../Function/functionalize')
					  , toArray = require('./to-array').call
					  , clone   = require('../Array/clone').call;

					module.exports = f(function () {
						return isArray(this) ? clone(this) : toArray(this);
					});
				},
				"compact.js": function (exports, module, require) {
					// Returns a copy of the array-like object with all falsy values removed.
					//
					// Inspired by: http://documentcloud.github.com/underscore/#compact

					'use strict';

					var f      = require('../Function/functionalize')
					  , filter = require('./filter/call');

					module.exports = f(function () {
						return filter(this, Boolean);
					});
				},
				"concat.js": function (exports, module, require) {
					// Array.prototype.concat for array-like objects.

					'use strict';

					var f         = require('../Function/functionalize')
					  , applyBind = require('../Function/apply/bind')
					  , toArray   = require('./to-array').call

					  , concat  = applyBind(Array.prototype.concat);

					module.exports = f(function () {
						return concat(toArray(this), arguments);
					});
				},
				"contains.js": function (exports, module, require) {
					// Whether list contains the given object.
					//
					// Name inspired by Closure library: http://closure-library.googlecode.com/svn/trunk/closure/goog/string/string.js

					'use strict';

					var f       = require('../Function/functionalize')
					  , indexOf = require('./index-of/call');

					module.exports = f(function (x) {
						return (this.indexOf ? this.indexOf(x) : indexOf(this, x)) > -1;
					});
				},
				"diff.js": function (exports, module, require) {
					// Returns elements that are not present in other list

					'use strict';

					var f        = require('../Function/functionalize')
					  , not      = require('../Function/not').call
					  , clone    = require('./clone').call
					  , contains = require('./contains').bind
					  , filter   = require('./filter/call')
					  , forEach  = require('./for-each/call')
					  , remove   = require('../Array/remove').bind;

					module.exports = f(function (list) {
						var r;
						if (this.length > list.length) {
							r = clone(this);
							forEach(list, remove(r));
							return r;
						} else {
							return filter(this, not(contains(list)));
						}
					});
				},
				"every": {
					"call.js": function (exports, module, require) {
						// call binded to Array.prototype.every

						'use strict';

						module.exports = require('../../Function/call/bind')(Array.prototype.every);
					},
					"index.js": function (exports, module, require) {
						'use strict';

						module.exports = {
							call: require('./call')
						};
					}
				},
				"exclusion.js": function (exports, module, require) {
					// Returns elements that are found only in one of given lists

					'use strict';

					var push     = Array.prototype.push
					  , f        = require('../Function/functionalize')
					  , not      = require('../Function/not').call
					  , contains = require('./contains').bind
					  , filter   = require('./filter/call')
					  , toArray  = require('./to-array').call
					  , byLength = require('../Object/compare-by')('length').call;

					module.exports = f(function () {
						var lists, seen;
						if (arguments.length) {
							push.apply(lists = [this], arguments);
							lists.sort(byLength);
							seen = [];
							return lists.reduce(function (r, list) {
								r = r.filter(not(contains(list)))
									.concat(filter(list, not(contains(seen))));
								push.apply(seen, toArray(list));
								return r;
							}, []);
						} else {
							return toArray(this);
						}
					});
				},
				"filter": {
					"call.js": function (exports, module, require) {
						// call binded to Array.prototype.filter

						'use strict';

						module.exports = require('../../Function/call/bind')(Array.prototype.filter);
					},
					"index.js": function (exports, module, require) {
						'use strict';

						module.exports = {
							call: require('./call')
						};
					}
				},
				"find-same-start-length.js": function (exports, module, require) {
					// Returns index at which strings starts to differ (looking from left)

					'use strict';

					var f          = require('../Function/functionalize')
					  , toArray    = require('./to-array').call
					  , every      = require('./every/call')
					  , sortMethod = require('../Object/compare-by')('length').call;

					module.exports = f(function () {
						var args, r;
						args = toArray(arguments);
						args.push(this);
						args.sort(sortMethod);
						r = args[0].length;

						every(args, function (list) {
							var index = 0;
							every(this, function (item, i) {
								if (item === list[i]) {
									++index;
									return true;
								} else {
									return false;
								}
							});
							return r = (index < r) ? index : r;
						}, this);

						return r;
					});
				},
				"find.js": function (exports, module, require) {
					// Find element in list

					'use strict';

					var f    = require('../Function/functionalize')
					  , some = require('./some/call');

					module.exports = f(function (query, scope) {
						var r;
						return some(this, function (value) {
							if (query.apply(this, arguments)) {
								r = value;
								return true;
							}
							return false;
						}, scope) ? r : null;
					});
				},
				"first.js": function (exports, module, require) {
					// Returns first element from array

					var f     = require('../Function/functionalize');

					module.exports = f(function () {
						return this[0];
					});
				},
				"flatten.js": function (exports, module, require) {
					// Flattens nested array-like objects.

					'use strict';

					var isArray   = Array.isArray
					  , f         = require('../Function/functionalize')
					  , applyBind = require('../Function/apply/bind')
					  , toArray   = require('./to-array').call
						, isList    = require('./is-list')
					  , forEach   = require('./for-each/call')

					  , push      = applyBind(Array.prototype.push);

					module.exports = f(function flatten () {
						var r = [];
						if (typeof this === 'string') {
							return this;
						}
						forEach(this, function (x) {
							push(r, isArray(x) ? flatten.call(x) : [x]);
						});
						return r;
					});
				},
				"for-each": {
					"bind.js": function (exports, module, require) {
						// bind binded to Array.prototype.forEach

						'use strict';

						module.exports = require('../../Function/bind/bind')(Array.prototype.forEach);
					},
					"call.js": function (exports, module, require) {
						// call binded to Array.prototype.forEach

						'use strict';

						module.exports = require('../../Function/call/bind')(Array.prototype.forEach);
					},
					"index.js": function (exports, module, require) {
						'use strict';

						module.exports = {
							bind: require('./bind'),
							call: require('./call')
						};
					}
				},
				"for-each-right.js": function (exports, module, require) {
					// forEach, starting from last element

					'use strict';

					var f = require('../Function/functionalize');

					module.exports = f(function (fn, scope) {
						scope = scope || this;
						for (var i = this.length; i >= 0; --i) {
							if (this.hasOwnProperty(i)) {
								fn.call(scope, this[i], i, this);
							}
						}
					});
				},
				"for-each-simple.js": function (exports, module, require) {
					// Simple forEach, callback receves just value argument

					'use strict';

					var f       = require('../Function/functionalize')
					  , aritize = require('../Function/aritize').call
					  , forEach = require('./for-each/call')

					module.exports = f(function (fn, scope) {
						forEach(this, aritize(fn, 1), scope);
					});
				},
				"group.js": function (exports, module, require) {
					// Group list elements
					// Inspired by Underscore's groupBy:
					// http://documentcloud.github.com/underscore/#groupBy

					'use strict';

					var f       = require('../Function/functionalize')
					  , forEach = require('./for-each/call');

					module.exports = f(function (fn, scope) {
						var r = {};
						forEach(this, function (v) {
							var key = fn.apply(scope, arguments);
							if (!r.hasOwnProperty(key)) {
								r[key] = [];
							}
							r[key].push(v);
						});
						return r;
					});
				},
				"index-of": {
					"call.js": function (exports, module, require) {
						// call binded to Array.prototype.indexOf

						'use strict';

						module.exports = require('../../Function/call/bind')(Array.prototype.indexOf);
					},
					"index.js": function (exports, module, require) {
						'use strict';

						module.exports = {
							call: require('./call')
						};
					}
				},
				"index.js": function (exports, module, require) {
					'use strict';

					module.exports = {
						clone:               require('./clone'),
						compact:             require('./compact'),
						concat:              require('./concat'),
						contains:            require('./contains'),
						diff:                require('./diff'),
						every:               require('./every'),
						first:               require('./first'),
						exclusion:           require('./exclusion'),
						filter:              require('./filter'),
						find:                require('./find'),
						findSameStartLength: require('./find-same-start-length'),
						flatten:             require('./flatten'),
						forEach:             require('./for-each'),
						forEachRight:        require('./for-each-right'),
						forEachSimple:       require('./for-each-simple'),
						group:               require('./group'),
						indexOf:             require('./index-of'),
						indexesOf:           require('./indexes-of'),
						intersection:        require('./intersection'),
						isListObject:        require('./is-list-object'),
						isList:              require('./is-list'),
						join:                require('./join'),
						map:                 require('./map'),
						mapRight:            require('./map-right'),
						peek:                require('./peek'),
						reduce:              require('./reduce'),
						shiftSame:           require('./shift-same'),
						slice:               require('./slice'),
						some:                require('./some'),
						someValue:           require('./some-value'),
						someRight:           require('./some-right'),
						sort:                require('./sort'),
						sorted:              require('./sorted'),
						toArray:             require('./to-array')
					};
				},
				"indexes-of.js": function (exports, module, require) {
					// Find all indexes of given value

					var f       = require('../Function/functionalize')
					  , indexOf = require('./index-of/call');

					module.exports = f(function (value) {
						var r = [], start = 0, i;
						while ((i = indexOf(this, value, start)) !== -1) {
							r.push(i);
							start = i + 1;
						}
						return r;
					});
				},
				"intersection.js": function (exports, module, require) {
					// Computes the list of values that are the intersection of all the arrays
					//
					// Inspired by: http://documentcloud.github.com/underscore/#intersection

					'use strict';

					var push     = Array.prototype.push
					  , f        = require('../Function/functionalize')
					  , contains = require('./contains').bind
					  , filter   = require('./filter/call')
					  , toArray  = require('./to-array').call
					  , byLength = require('../Object/compare-by')('length').call;

					module.exports = f(function () {
						var lists;
						if (arguments.length) {
							push.apply(lists = [this], arguments);
							lists.sort(byLength);
							return lists.reduce(function (a, b) {
								return filter(a, contains(b));
							});
						} else {
							return toArray(this);
						}
					});
				},
				"is-list-object.js": function (exports, module, require) {
					// Whether object is array-like object but not primitive

					'use strict';

					module.exports = function (x) {
						return x && (typeof x.length === 'number') && (typeof x === "object");
					};
				},
				"is-list.js": function (exports, module, require) {
					// Whether object is array-like object

					'use strict';

					module.exports = function (x) {
						return x && (typeof x.length === 'number') &&
							((typeof x === "object") || (typeof x === "string"));
					};
				},
				"join": {
					"call.js": function (exports, module, require) {
						// call binded to Array.prototype.join

						'use strict';

						module.exports = require('../../Function/call/bind')(Array.prototype.join);
					},
					"index.js": function (exports, module, require) {
						'use strict';

						module.exports = {
							call: require('./call')
						};
					}
				},
				"map": {
					"call.js": function (exports, module, require) {
						// call binded to Array.prototype.map

						'use strict';

						module.exports = require('../../Function/call/bind')(Array.prototype.map);
					},
					"index.js": function (exports, module, require) {
						'use strict';

						module.exports = {
							call: require('./call')
						};
					}
				},
				"map-right.js": function (exports, module, require) {
					// map, starting from last element

					'use strict';

					var f = require('../Function/functionalize');

					module.exports = f(function (fn, scope) {
						var resultArray = new Array(this.length), count = 0;
						for (var i = this.length-1; i >= 0; i--) {
							if (this.hasOwnProperty(i)) {
								resultArray[count] = (fn.call(scope, this[i], i, this));
							}
							count++;
						}
						return resultArray;
					});
				},
				"peek.js": function (exports, module, require) {
					// Returns the last element in an array without removing it.
					// Inspired and stole naming from Closure library:
					// http://closure-library.googlecode.com/svn/trunk/closure/goog/array/array.js

					var f = require('../Function/functionalize');

					module.exports = f(function () {
						return this[this.length - 1];
					});
				},
				"reduce": {
					"call.js": function (exports, module, require) {
						// call binded to Array.prototype.reduce

						'use strict';

						module.exports = require('../../Function/call/bind')(Array.prototype.reduce);
					},
					"index.js": function (exports, module, require) {
						'use strict';

						module.exports = {
							call: require('./call')
						};
					}
				},
				"shift-same.js": function (exports, module, require) {
					// Returns string left trimmed by characters that occurs at start of all other strings

					'use strict';

					var f     = require('../Function/functionalize')
					  , slice = require('./slice/call')
					  , find  = require('./find-same-start-length').apply;

					module.exports = f(function () {
						var i = find(this, arguments);
						return this.slice ? this.slice(i) : slice(this, i);
					});
				},
				"slice": {
					"call.js": function (exports, module, require) {
						// call binded to Array.prototype.slice

						'use strict';

						module.exports = require('../../Function/call/bind')(Array.prototype.slice);
					},
					"index.js": function (exports, module, require) {
						'use strict';

						module.exports = {
							call: require('./call')
						};
					}
				},
				"some": {
					"call.js": function (exports, module, require) {
						// call binded to Array.prototype.some

						'use strict';

						module.exports = require('../../Function/call/bind')(Array.prototype.some);
					},
					"index.js": function (exports, module, require) {
						'use strict';

						module.exports = {
							call: require('./call')
						};
					}
				},
				"some-right.js": function (exports, module, require) {
					// some, starting from last element

					'use strict';

					var f = require('../Function/functionalize');

					module.exports = f(function (fn, scope) {
						scope = scope || this;
						for (var i = this.length; i >= 0; --i) {
							if (this.hasOwnProperty(i) && fn.call(scope, this[i], i, this)) {
								return true;
							}
						}
						return false;
					});
				},
				"some-value.js": function (exports, module, require) {
					// Same as 'some', however returns first 'truthy' value instead of just 'true'

					'use strict';

					var f    = require('../Function/functionalize')
					  , some = require('./some/call')

					module.exports = f(function (cb, context) {
						var r;
						return some(this, function () {
							return (r = cb.apply(this, arguments));
						}, context) ? r : null;
					});
				},
				"sort.js": function (exports, module, require) {
					// Sort for array-like object,
					// it copies list to array and applies sort on that array.

					'use strict';

					var f    = require('../Function/functionalize')
					  , copy = require('./clone').call

					module.exports = f(function (compareFn) {
						return copy(this).sort(compareFn);
					});
				},
				"sorted": {
					"binary-boundary-search.js": function (exports, module, require) {
						// In sorted list search for highest or lowest index of item that is
						// smaller/greater (or same) as given value.
						// It's variant of binary search algorithm

						'use strict';

						var floor         = Math.floor
						  , isLess        = require('../../Number/is-less').call
						  , isLessOrEqual = require('../../Number/is-less-or-equal').call

						  , cache = {};

						module.exports = function (equalMatches, searchHighest) {
							var operator;

							equalMatches = Boolean(equalMatches);
							searchHighest = Boolean(searchHighest);

							if (cache[equalMatches + '' + searchHighest]) {
								return cache[equalMatches + '' + searchHighest];
							}

							if (searchHighest) {
								operator = equalMatches ? isLess : isLessOrEqual;
							} else {
								operator = equalMatches ? isLessOrEqual : isLess;
							}

							return cache[equalMatches + '' + searchHighest] = function (compare, length) {
								var low, high, middle;
								low = 0;
								high = length - 1;


								while (low <= high) {
									middle = floor((low + high)/2);
									if (operator(compare(middle), 0)) {
										high = middle - 1;
									} else {
										low = middle + 1;
									}
								}

								return searchHighest ? high : low;
							};
						};
					},
					"index.js": function (exports, module, require) {
						'use strict';

						module.exports = {
							binaryBoundarySearch: require('./binary-boundary-search')
						};
					}
				},
				"to-array.js": function (exports, module, require) {
					// Convert array-like object to an Array

					'use strict';

					var isArray     = Array.isArray
					  , slice       = Array.prototype.slice
					  , f           = require('../Function/functionalize')
					  , isArguments = require('../Function/is-arguments')

					module.exports = f(function () {
						if (isArray(this)) {
							return this;
						} else if (isArguments(this)) {
							return (this.length === 1) ? [this[0]] : Array.apply(null, this);
						} else {
							return slice.call(this);
						}
					});
				}
			},
			"Number": {
				"autoincrement.js": function (exports, module, require) {
					// Return function that on each call will return number incremented by one

					module.exports = function (start, step) {
						var i;
						step = step || 1;
						i = (start || step) - step;

						return function () {
							return i += step;
						};
					};
				},
				"compare.js": function (exports, module, require) {
					// Compare numbers

					'use strict';

					var f = require('../Function/functionalize');

					module.exports = f(function (other) {
						return this - other;
					});
				},
				"index.js": function (exports, module, require) {
					'use strict';

					module.exports = {
						autoincrement:  require('./autoincrement'),
						compare:        require('./compare'),
						isFiniteNumber: require('./is-finite-number'),
						isLess:         require('./is-less'),
						isLessOrEqual:  require('./is-less-or-equal'),
						isNumber:       require('./is-number'),
						pad:            require('./pad')
					};
				},
				"is-finite-number.js": function (exports, module, require) {
					// Whether given value is number and is finite

					'use strict';

					var isNumber = require('./is-number');

					module.exports = function (x) {
						return isNumber(x) && isFinite(x);
					};
				},
				"is-less-or-equal.js": function (exports, module, require) {
					// Returns true if the subject number is less than or equal to the other number

					'use strict';

					var f = require('../Function/functionalize');

					module.exports = f(function (n) {
						return this <= n;
					});
				},
				"is-less.js": function (exports, module, require) {
					// Returns true if the subject number is less than the other number

					'use strict';

					var f = require('../Function/functionalize');

					module.exports = f(function (n) {
						return this < n;
					});
				},
				"is-number.js": function (exports, module, require) {
					// Whether given value is number but not NaN

					'use strict';

					var toString = require('../Object/to-string/call')

					  , id = toString(1);

					module.exports = function (x) {
						return (((typeof x === 'number') || (x && (typeof x == 'object') &&
							((x instanceof Number) || (toString(x) === id)))) && !isNaN(x)) || false;
					};
				},
				"pad.js": function (exports, module, require) {
					// Pad given number with zeros. Returns string

					'use strict';

					var f   = require('../Function/functionalize')
					  , pad = require('../String/pad').bind('0');

					module.exports = f(function (precision) {
						var fn = pad(this + (precision ? (1 + precision) : 0)).call;
						return f(function () {
							return fn(precision ? this.toFixed(precision) : String(this));
						});
					});
				}
			},
			"Object": {
				"_curry_super.js": function (exports, module, require) {
					// Internal method used by 'extend' and 'override' methods

					'use strict';

					var callBind   = require('../Function/call/bind')
					  , curry      = require('../Function/curry').call
					  , isFunction = require('../Function/is-function')

					  , pattern, map;

					pattern = /^\s*function\s*\(\s*(_super|_proto)\s*(?:,\s*(_super|_proto)\s*)?[,)]/;

					map = {
						'_super': function (from, proto) {
							return callBind(from);
						},
						'_proto': function (from, proto) {
							return proto;
						}
					};

					module.exports = function (from, to, proto) {
						var match, a1, a2;
						if (isFunction(from) && isFunction(to) &&
							 (match = to.toString().match(pattern))) {
							if (match[2]) {
								return curry(to, map[match[1]](from, proto), map[match[2]](from, proto));
							} else {
								return curry(to, map[match[1]](from, proto));
							}
						} else {
							return to;
						}
					};
				},
				"bind-methods.js": function (exports, module, require) {
					// Bind all object functions to given scope.
					// If scope is not given then functions are bound to object they're assigned to.
					// This emulates Python's bound instance methods.
					// If source (second argument) is present then all functions from source are
					// binded to scope and assigned to object.
					//
					// Inspired by:
					// http://mochi.github.com/mochikit/doc/html/MochiKit/Base.html#fn-bindmethods

					'use strict';

					var f          = require('../Function/functionalize')
					  , bindBind   = require('../Function/bind/bind')
					  , isFunction = require('../Function/is-function')

					  , fn;

					fn = bindBind(function (source, o, key) {
						var prop;
						if (isFunction(source[key])) {
							prop = Object.getOwnPropertyDescriptor(source, key);
							if (prop.value) {
								prop.value = source[key].bind(this);
								o[key] = prop;
							}
						}
						return o;
					});

					module.exports = f(function (scope, source) {
						return Object.defineProperties(this,
							Object.getOwnPropertyNames(source || this)
							.reduce(fn(scope || this, source || this), {}));
					});
				},
				"clone.js": function (exports, module, require) {
					// Clone object

					'use strict';

					var create                   = Object.create
					  , getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor
					  , getOwnPropertyNames      = Object.getOwnPropertyNames
					  , getPrototypeOf           = Object.getPrototypeOf
					  , f                        = require('../Function/functionalize');

					module.exports = f(function () {
						return create(getPrototypeOf(this),
							getOwnPropertyNames(this).reduce(function (o, key) {
								o[key] = getOwnPropertyDescriptor(this, key);
								return o;
							}.bind(this), {}));
					});
				},
				"compare-by.js": function (exports, module, require) {
					// Compare by given property

					'use strict';

					var f       = require('../Function/functionalize')
					  , memoize = require('../Function/memoize')
					  , compare = require('./compare').call;

					module.exports = memoize(function (name) {
						return f(function (other) {
							return compare(this[name], other[name]);
						});
					}, [String]);
				},
				"compare.js": function (exports, module, require) {
					// Better compare function
					// Reduces objects with valueOf if object is still not primitive then it's
					// reduced with toString.
					// Result primitives are compared as numbers if they're numbers and as strings
					// if they're strings

					'use strict';

					var keys         = Object.keys
						, f            = require('../Function/functionalize')
					  , isString     = require('../String/is-string')
					  , strCompare   = require('../String/locale-compare-insensitive').call
					  , isPrimitive  = require('../is-primitive')

					  , resolve;

					resolve = function (a) {
						if (!isPrimitive(a)) {
							a = a.valueOf();
							if (!isPrimitive(a)) {
								a = a.toString();
							}
						}
						return a;
					};

					module.exports = f(function (other) {
						var a = this, b = other;
						if (a === b) {
							return 0;
						}
						a = resolve(a), b = resolve(b);
						if (a == b) {
							return 0;
						}
						if (a == null) {
							return -1;
						} else if (b == null) {
							return 1;
						} else if (isString(a) || isString(b)) {
							if (!isString(a)) {
								a = a.toString();
							} else {
								b = b.toString();
							}
							return strCompare(a, b);
						} else {
							return Number(a) - Number(b);
						}
					});
				},
				"descriptors": {
					"c.js": function (exports, module, require) {
						'use strict';

						module.exports = function (get, set) {
							return set ?
								{ get: get, set: set, configurable: true }
							: { value: get, configurable: true };
						};
					},
					"ce.js": function (exports, module, require) {
						'use strict';

						module.exports = function (get, set) {
							return set ?
								{ get: get, set: set, configurable: true, enumerable: true }
							: { value: get, configurable: true, enumerable: true };
						};
					},
					"cew.js": function (exports, module, require) {
						'use strict';

						module.exports = function (value) {
							return { value: value, configurable: true, enumerable: true, writable: true };
						};
					},
					"cw.js": function (exports, module, require) {
						'use strict';

						module.exports = function (value) {
							return { value: value, configurable: true, writable: true };
						};
					},
					"e.js": function (exports, module, require) {
						'use strict';

						module.exports = function (get, set) {
							return set ?
								{ get: get, set: set, enumerable: true }
							: { value: get, enumerable: true };
						};
					},
					"ew.js": function (exports, module, require) {
						'use strict';

						module.exports = function (value) {
							return { value: value, enumerable: true, writable: true };
						};
					},
					"index.js": function (exports, module, require) {
						'use strict';

						module.exports = exports = require('./v');

						exports.c = require('./c');
						exports.e = require('./e');
						exports.w = require('./w');
						exports.ce = require('./ce');
						exports.cw = require('./cw');
						exports.ew = require('./ew');
						exports.cew = require('./cew');
					},
					"v.js": function (exports, module, require) {
						'use strict';

						module.exports = function (get, set) {
							return set ?
								{ get: get, set: set }
							: { value: get };
						};
					},
					"w.js": function (exports, module, require) {
						'use strict';

						module.exports = function (value) {
							return { value: value, writable: true };
						};
					}
				},
				"every.js": function (exports, module, require) {
					// Analogous to Array.prototype.every.
					//
					// Returns true if every descriptor-key pair in this object satisfies
					// the provided testing function.

					'use strict';

					var f     = require('../Function/functionalize')
					  , s     = require('../Function/s').call
					  , pluck = require('./pluck').bind;

					module.exports = f(function (callback, scope) {
						return Object.getOwnPropertyNames(this)
							.every(s(callback, pluck(this)), scope);
					});
				},
				"extend.js": function (exports, module, require) {
					// Same as Object.create but enables super calls
					// If function property is found in both objects, and child function arguments
					// list starts with '_super' argument, then it will be extended such as child
					// method will receive descendand.call method as first argument.

					'use strict';

					var create     = Object.create
					  , f          = require('../Function/functionalize')
					  , copy       = require('./plain/clone').call
					  , oMap       = require('./plain/map').call
					  , currySuper = require('./_curry_super')

					  , fn;

					fn = function (desc, name) {
						desc = copy(desc);
						desc.value = currySuper(this[name], desc.value, this);
						return desc;
					};

					module.exports = f(function (descriptors) {
						return create(this, oMap(descriptors || {}, fn, this));
					});
				},
				"get-property-names.js": function (exports, module, require) {
					// Get all property names (whole (prototype) chain down)

					'use strict';

					var push = Array.prototype.push
					  , f    = require('../Function/functionalize')
					  , uniq = require('../Array/uniq').call;

					module.exports = f(function () {
						var o = this, keys = Object.getOwnPropertyNames(o);
						while((o = Object.getPrototypeOf(o))) {
							push.apply(keys, Object.getOwnPropertyNames(o));
						}
						uniq(keys);
						return keys;
					});
				},
				"index.js": function (exports, module, require) {
					'use strict';

					module.exports = {
						bindMethods:      require('./bind-methods'),
						clone:            require('./clone'),
						compare:          require('./compare'),
						compareBy:        require('./compare-by'),
						descriptors:      require('./descriptors'),
						every:            require('./every'),
						extend:           require('./extend'),
						getPropertyNames: require('./get-property-names'),
						invoke:           require('./invoke'),
						isEqual:          require('./is-equal'),
						isObject:         require('./is-object'),
						mapToArray:       require('./map-to-array'),
						merge:            require('./merge'),
						mergeDeep:        require('./merge-deep'),
						override:         require('./override'),
						plain:            require('./plain'),
						pluck:            require('./pluck'),
						same:             require('./same'),
						sameType:         require('./same-type'),
						toDescriptors:    require('./to-descriptors'),
						toDescriptor:     require('./to-descriptor'),
						toString:         require('./to-string')
					};
				},
				"invoke.js": function (exports, module, require) {
					// Invoke function on pregiven object and arguments
					//
					// invoke(obj, args)(f) =def f.call(obj, args);

					'use strict';

					var f = require('../Function/functionalize')

					  , fn = function (args, f) {
							return f.apply(this, args);
						};

					module.exports = f(function () {
						return fn.bind(this, arguments);
					});
				},
				"is-equal.js": function (exports, module, require) {
					'use strict';

					var f = require('../Function/functionalize');

					module.exports = f(function (other) {
						return this == other;
					});
				},
				"is-object.js": function (exports, module, require) {
					// Whether value is not primitive

					'use strict';

					module.exports = function (x) {
						return x === Object(x);
					};
				},
				"map-to-array.js": function (exports, module, require) {
					// Analogous to Array.prototype.map
					//
					// Creates an array of results of calling
					// a provided function on every key-value pair in this object.

					'use strict';

					var f       = require('../Function/functionalize')
					  , forEach = require('./plain/for-each').call;

					module.exports = f(function (callback, scope, compareFn, compareByKey) {
						var a = [];
						forEach(this, function (value, key) {
							a.push(callback.call(scope, value, key, this));
						}, this, compareFn, compareByKey);
						return a;
					});
				},
				"merge-deep.js": function (exports, module, require) {
					// Merge properties of one object into other.
					// Property keys found in both objects will be overwritten.
					//
					// Properties are taken from whole prototype chain
					// (up to prototype which both objects share)

					'use strict';

					var f     = require('../Function/functionalize')
					  , merge = require('./merge').bind;

					module.exports = f(function (b) {
						var objs = [b], p = b;
						while(!((p = Object.getPrototypeOf(p)).isPrototypeOf(this))) {
							objs.unshift(p);
						}
						objs.forEach(merge(this));
						return this;
					});
				},
				"merge.js": function (exports, module, require) {
					// Merge properties of one object into other.
					// Property keys found in both objects will be overwritten.
					//
					// On the way we need to workaround a V8 bug

					'use strict';

					var f          = require('../Function/functionalize')
					  , isFunction = require('../Function/is-function');

					module.exports = f(function (b) {
						var desc;
						return Object.defineProperties(this,
							Object.getOwnPropertyNames(b).reduce(function (o, key) {
								if (!(desc = Object.getOwnPropertyDescriptor(this, key))
									|| desc.configurable) {
									o[key] = Object.getOwnPropertyDescriptor(b, key);
								}
								return o;
							}.bind(this), {}));
					});
				},
				"override.js": function (exports, module, require) {
					// As extend, but doesn't extend object but operates exactly on it.
					// see ../extend.js

					'use strict';

					var defineProperties = Object.defineProperties
					  , getPrototypeOf   = Object.getPrototypeOf
					  , f                = require('../Function/functionalize')
					  , copy             = require('./plain/clone').call
					  , oMap             = require('./plain/map').call
					  , currySuper       = require('./_curry_super')

					  , fn;

					fn = function (proto, desc, name) {
						desc = copy(desc);
						desc.value = currySuper(this[name], desc.value, proto);
						return desc;
					};

					module.exports = f(function (descriptors) {
						return defineProperties(this,
							oMap(descriptors || {}, fn.bind(this, getPrototypeOf(this))));
					});
				},
				"plain": {
					"_iterate.js": function (exports, module, require) {
						// Internal method, used by iteration functions.
						// Calls a function for each key-value pair found in object
						// Optionally takes compareFn to iterate object in specific order

						'use strict';

						var getKeys    = Object.keys
						  , isFunction = require('../../Function/is-function')
						  , values     = require('./values').call;

						module.exports = function (method) {
							return function (callback, scope, compareFn, compareByKey) {
								var keys, count, fn, col, index;
								col = keys = getKeys(this);
								index = -1;
								count = keys.length;
								if (compareFn) {
									if (compareByKey) {
										keys.sort(compareFn);
									} else {
										fn = function (value) {
											var key;
											keys.some(function (k, index) {
												if (this[k] === value) {
													key = k;
													keys.splice(index, 1);
													return true;
												}
												return false;
											}, this);
											return callback.call(scope, value, key, this, ++index, count);
										};
										col = values(this).sort(compareFn);
									}
								}
								if (!fn) {
									fn = function (key) {
										return callback.call(scope, this[key], key, this, ++index, count);
									};
								}
								if (isFunction(method)) {
									return method.call(col, fn, this);
								} else {
									return col[method](fn, this);
								}
							};
						};
					},
					"bind-methods.js": function (exports, module, require) {
						// Bind all object functions to given scope.
						// If scope is not given then functions are bound to object they're assigned to.
						// This emulates Python's bound instance methods.
						// If source (second argument) is present then all functions from source are
						// binded to scope and assigned to object.
						//
						// Inspired by:
						// http://mochi.github.com/mochikit/doc/html/MochiKit/Base.html#fn-bindmethods

						'use strict';

						var f          = require('../../Function/functionalize')
						  , isFunction = require('../../Function/is-function')
						  , forEach    = require('./for-each').call

						module.exports = f(function (scope, source) {
							scope = scope || this;
							source = source || this;
							forEach(source, function (value, key) {
								if (isFunction(value)) {
									this[key] = value.bind(scope);
								}
							}, this);
							return this;
						});
					},
					"clone.js": function (exports, module, require) {
						// Create duplicate of an object.

						'use strict';

						var f             = require('../../Function/functionalize')
						  , isPlainObject = require('./is-plain-object').call
						  , forEach       = require('./for-each').call
						  , merge         = require('./merge').call

						var recursive = function (to, from, cloned) {
							forEach(from, function (value, key) {
								var index;
								if (isPlainObject(value)) {
									if ((index = cloned[0].indexOf(value)) === -1) {
										cloned[0].push(value);
										cloned[1].push(to[key] = merge({}, value));
										recursive(to[key], value, cloned);
									} else {
										to[key] = cloned[1][index];
									}
								}
							}, from);
						};

						module.exports = f(function (deep) {
							var o = merge({}, this);
							if (deep) {
								recursive(o, this, [[this], [o]]);
							}
							return o;
						});
					},
					"compact.js": function (exports, module, require) {
						// Remove all properties with falsy values

						'use strict';

						var keys = Object.keys
						  , f    = require('../../Function/functionalize');

						module.exports = f(function (cb) {
							if (!cb) {
								cb = Boolean;
							}
							keys(this).forEach(function (name) {
								if (!cb(this[name], name, this)) {
									delete this[name];
								}
							}, this);
							return this;
						});
					},
					"count.js": function (exports, module, require) {
						// Return count of properties

						var keys = Object.keys
						  , f    = require('../../Function/functionalize');

						module.exports = f(function () {
							return keys(this).length;
						});
					},
					"create.js": function (exports, module, require) {
						// Object.create ES3 way, no descriptors involved

						'use strict';

						var merge = require('./merge').call;

						module.exports = function (proto, props) {
							var C, obj
							C = function () {};
							C.prototype = proto;
							obj = new C();
							return props ? merge(obj, props) : obj;
						};
					},
					"delete.js": function (exports, module, require) {
						// Delete property of object

						'use strict';

						var f = require('../../Function/functionalize');

						module.exports = f(function (name) {
							delete this[name];
						});
					},
					"diff.js": function (exports, module, require) {
						// Returns differences between two plain objects
						// Returned object is three arrays wrapped in array
						// Each array is set of found property names that:
						// 0 - were not present in other object
						// 1 - have different values
						// 2 - were not present in scope object

						'use strict';

						var keys         = Object.keys
							, f            = require('../../Function/functionalize')
						  , diff         = require('../../List/diff').call
						  , intersection = require('../../List/intersection').call
						  , isObject     = require('../is-object')
						  , forEach      = require('./for-each').call
						  , link         = require('./link').bind;


						module.exports = f(function (target) {
							var k1 = keys(this), k2 = keys(target);
							return [diff(k1, k2), intersection(k1, k2).filter(function (key) {
								return (isObject(this[key]) && isObject(target[key])) ?
									(this[key].valueOf() !== target[key].valueOf()) :
									(this[key] !== target[key]);
							}, this), diff(k2, k1)];
						});
					},
					"elevate.js": function (exports, module, require) {
						// Merge object properties of given object into one object
						//
						// elevate.call({ a: { b: 1, c: 1 }, d: { e: 1, f: 1 } })
						//                 =def { b: 1, c: 1, e: 1, f: 1 }

						'use strict';

						var f        = require('../../Function/functionalize')
						  , sequence = require('../../Function/sequence').call
						  , get      = require('./get').bind
						  , merge    = require('./merge').bind;

						module.exports = f(function (result) {
							result = result || {};
							Object.keys(this).forEach(sequence(get(this), merge(result)));
							return result;
						});
					},
					"empty.js": function (exports, module, require) {
						// Remove all object properties

						'use strict';

						var keys = Object.keys
						  , f    = require('../../Function/functionalize')
						  , del  = require('./delete')

						module.exports = f(function () {
							keys(this).forEach(del, this);
							return this;
						});
					},
					"every.js": function (exports, module, require) {
						// Analogous to Array.prototype.every.
						//
						// Returns true if every key-value pair in this object satisfies the provided
						// testing function.

						'use strict';

						var f       = require('../../Function/functionalize')
						  , iterate = require('./_iterate');

						module.exports = f(iterate('every'));
					},
					"extend.js": function (exports, module, require) {
						// extend ES3 way, no descriptors involved
						// see ../extend.js for more details

						'use strict';

						var create     = Object.create
						  , f          = require('../../Function/functionalize')
						  , oMap       = require('./map').call
						  , merge      = require('./merge').call
						  , currySuper = require('../_curry_super')

						  , fn;

						fn = function (value, name) {
							return currySuper(this[name], value, this);
						};

						module.exports = f(function (ext) {
							return merge(create(this), oMap(ext || {}, fn, this));
						});
					},
					"filter.js": function (exports, module, require) {
						// Analogous to Array.prototype.filter
						//
						// Creates a new object with all of the properites of this object for which the
						// provided filtering function returns true.

						'use strict';

						var f       = require('../../Function/functionalize')
						  , oForEach = require('./for-each').call;

						module.exports = f(function (callback, scope) {
							var o = {};
							oForEach(this, function (value, key) {
								if (callback.call(scope, value, key)) {
									o[key] = this[key];
								}
							}, this);
							return o;
						});
					},
					"first.js": function (exports, module, require) {
						// Return value for first found object property

						'use strict';

						var f = require('../../Function/functionalize');

						module.exports = f(function () {
							var i;
							for (i in this) {
								if (this.propertyIsEnumerable(i)) {
									return this[i];
								}
							}
							return null;
						});
					},
					"for-each.js": function (exports, module, require) {
						// Analogous to Array.prototype.forEach
						//
						// Calls a function for each key-value pair found in object
						// Additionally you can provide compareFn to iterate object in desired order

						'use strict';

						var f       = require('../../Function/functionalize')
						  , iterate = require('./_iterate');

						module.exports = f(iterate('forEach'));
					},
					"get-length.js": function (exports, module, require) {
						// Return number of assigned properties;

						var keys = Object.keys
						  , f    = require('../../Function/functionalize')

						module.exports = f(function () {
							return keys(this).length;
						});
					},
					"get.js": function (exports, module, require) {
						// Returns a function that for given key returns object[key] value
						//
						// pluck.bind(o)(k) =def o[k]

						'use strict';

						var f = require('../../Function/functionalize');

						module.exports = f(function (key) {
							return this[key];
						});
					},
					"index.js": function (exports, module, require) {
						'use strict';

						module.exports = {
							bindMethods:   require('./bind-methods'),
							clone:         require('./clone'),
							compact:       require('./compact'),
							count:         require('./count'),
							create:        require('./create'),
							delete:        require('./delete'),
							diff:          require('./diff'),
							elevate:       require('./elevate'),
							empty:         require('./empty'),
							every:         require('./every'),
							extend:        require('./extend'),
							filter:        require('./filter'),
							first:         require('./first'),
							forEach:       require('./for-each'),
							get:           require('./get'),
							getLength:     require('./get-length'),
							isEmpty:       require('./is-empty'),
							isPlainObject: require('./is-plain-object'),
							keyOf:         require('./key-of'),
							keysMap:       require('./keys-map'),
							link:          require('./link'),
							map:           require('./map'),
							merge:         require('./merge'),
							same:          require('./same'),
							slice:         require('./slice'),
							some:          require('./some'),
							setValue:      require('./set-value'),
							set:           require('./set'),
							toArray:       require('./to-array'),
							values:        require('./values')
						};
					},
					"is-empty.js": function (exports, module, require) {
						// Whether object has any own property

						'use strict';

						var f = require('../../Function/functionalize');

						module.exports = f(function () {
							var i;
							for (i in this) {
								if (this.propertyIsEnumerable(i)) {
									return false;
								}
							}
							return true;
						});
					},
					"is-plain-object.js": function (exports, module, require) {
						// Whether object is plain object.
						// Its protototype should be Object.prototype and it cannot be host object.

						'use strict';

						var f        = require('../../Function/functionalize')
						  , toString = require('../to-string/call')

						  , id       = {}.toString();

						module.exports = f(function () {
							return !!(this &&
								(typeof this === "object") &&
								(Object.getPrototypeOf(this) === Object.prototype) &&
								(toString(this) === id));
						});
					},
					"key-of.js": function (exports, module, require) {
						// Search object properties for value

						'use strict';

						var f    = require('../../Function/functionalize')
						  , some = require('./some').call;

						module.exports = f(function (needle) {
							var r;
							return some(this, function (value, name) {
								if (value === needle) {
									r = name;
									return true;
								}
								return false;
							}) ? r : null;
						});
					},
					"keys-map.js": function (exports, module, require) {
						// Create new object with same values, but remapped keys

						'use strict';

						var f       = require('../../Function/functionalize')
						  , forEach = require('./for-each').call;

						module.exports = f(function (callback, scope, compareFn, compareByKey) {
							var o = {};
							forEach(this, function (value, key) {
								o[callback.call(scope, key, value, this)] = value;
							}, this, compareFn, compareByKey);
							return o;
						});
					},
					"link.js": function (exports, module, require) {
						// Returns a function that for given key assigns chosen object property value to
						// same property of other object
						// 
						// link.call(a, b)(k) =def a[k]=b[k]

						'use strict';

						var f = require('../../Function/functionalize');

						module.exports = f(function (b, k) {
							return (this[k] = b[k]);
						});
					},
					"map.js": function (exports, module, require) {
						// Analogous to Array.prototype.map
						//
						// Creates a new object with properties which values are results of calling
						// a provided function on every key-value pair in this object.

						'use strict';

						var f       = require('../../Function/functionalize')
						  , forEach = require('./for-each').call;

						module.exports = f(function (callback, scope) {
							var o = {};
							forEach(this, function (value, key) {
								o[key] = callback.call(this, value, key);
							}, scope);
							return o;
						});
					},
					"merge.js": function (exports, module, require) {
						// Merge properties of one object into other.
						// Property keys found in both objects will be overwritten.

						'use strict';

						var f    = require('../../Function/functionalize')
						  , link = require('./link').bind;

						module.exports = f(function (b) {
							Object.keys(b).forEach(link(this, b));
							return this;
						});
					},
					"same.js": function (exports, module, require) {
						// Compares two objects.
						// Objects are considered same when all their property names and values match.

						'use strict';

						var f      = require('../../Function/functionalize')
						  , oEvery = require('./every').call;

						module.exports = f(function (target) {
							if (Object.keys(this).length === Object.keys(target).length) {
								return oEvery(this, function (value, name) {
									return target.propertyIsEnumerable(name) && (target[name] === value);
								});
							}
							return false;
						});
					},
					"set-value.js": function (exports, module, require) {
						// Return function that sets key property of given object to given value
						//
						// setValue.call(o, v)(k) =def o[k]=v

						'use strict';

						var f = require('../../Function/functionalize');

						module.exports = f(function (value, key) {
							this[key] = value;
						});
					},
					"set.js": function (exports, module, require) {
						// Return function that sets value to key property for given object
						//
						// set.call(o)(k, v) =def o[k]=v

						'use strict';

						var f = require('../../Function/functionalize');

						module.exports = f(function (key, value) {
							return (this[key] = value);
						});
					},
					"slice.js": function (exports, module, require) {
						// Slice for plain objects
						// Returns limited set of properties, optionally specific order in which
						// properties are chosen is considered

						'use strict';

						var max  = Math.max
						  , f    = require('../../Function/functionalize')
						  , copy = require('./clone').call
						  , some = require('./some').call;

						module.exports = f(function (start, end, compareFn, compareByKeys) {
							var r;
							if ((start == null) || isNaN(Number(start))) {
								start = 0;
							}
							if (end == null) {
								end = Infinity;
							} else if (isNaN(Number(end))) {
								end = 0;
							}
							start = Number(start);
							end = Number(end);

							if ((end === Infinity) && (start === 0)) {
								return copy(this);
							}

							r = {};
							if (start < end) {
								some(this, function (value, key, scope, index, count) {
									if (start < 0) {
										start = max(count + start, 0);
									}
									if (end < 0) {
										end = max(count + end, 0);
									}
									if (index === end) {
										return true;
									}
									if (index >= start) {
										r[key] = value;
									}
									return false;
								}, null, compareFn, compareByKeys);
							}

							return r;
						});
					},
					"some.js": function (exports, module, require) {
						// Analogous to Array.prototype.some
						//
						// Returns true if any key-value pair satisfies the provided
						// testing function.

						'use strict';

						var f       = require('../../Function/functionalize')
						  , iterate = require('./_iterate');

						module.exports = f(iterate('some'));
					},
					"to-array.js": function (exports, module, require) {
						// Returns object keys and values in array
						// Array can be two dimensional (every key and value is separate array) or flat
						// keys and values are placed alternately
						//
						// To get array of values see values.js, to get array of keys use Object.keys

						'use strict';

						var f       = require('../../Function/functionalize')
						  , forEach = require('./for-each').call

						  , fn, multi, flat;

						fn = function (fn) {
							return function () {
								var r = [];
								forEach(this, fn.bind(r));

								return r;
							};
						};

						multi = f(fn(function (value, key) {
							this.push([key, value]);
						}));

						flat = f(fn(function (value, key) {
							this.push(key, value);
						}));

						module.exports = function (doflat) {
							return doflat ? flat : multi;
						};
					},
					"values.js": function (exports, module, require) {
						// Return array of object property values

						'use strict';

						var keys = Object.keys
						  , f    = require('../../Function/functionalize')
						  , get  = require('./get').bind;

						module.exports = f(function () {
							return keys(this).map(get(this));
						});
					}
				},
				"pluck.js": function (exports, module, require) {
					// Returns a function that for given key returns object's descriptor
					// for given key
					//
					// pluck.bind(o)(k) =def descriptor of o.k

					'use strict';

					var f = require('../Function/functionalize');

					module.exports = f(function (key) {
						return Object.getOwnPropertyDescriptor(this, key);
					});
				},
				"same-type.js": function (exports, module, require) {
					// Whether objects are of same type

					'use strict';

					var f        = require('../Function/functionalize')
					  , toString = require('./to-string/call');

					module.exports = f(function (x) {
						if (typeof this !== 'object') {
							return ((typeof this) === (typeof x));
						} else if (this === null) {
							return x === null;
						} else {
							return !!(Object.getPrototypeOf(this).isPrototypeOf(x)
								&& (toString(this) === toString(x)));
						}
					});
				},
				"same.js": function (exports, module, require) {
					// Compares two objects.
					// Objects are considered same when all their property names and its
					// descriptors match.

					'use strict';

					var f      = require('../Function/functionalize')
					  , oEvery = require('./every').call
					  , same   = require('./plain/same').call;

					module.exports = f(function (target) {
						if (Object.getOwnPropertyNames(this).length
							 === Object.getOwnPropertyNames(target).length) {
							return oEvery(this, function (desc1, name) {
								var desc2 = Object.getOwnPropertyDescriptor(target, name);
								if (desc2) {
									return same(desc1, desc2);
								}
								return false;
							});
						}
						return false;
					});
				},
				"to-descriptor.js": function (exports, module, require) {
					// Return descriptor for value.
					// Shortcut for defining non enumerable, non writeable & non configurable
					// properties

					'use strict';

					var f = require('../Function/functionalize');

					module.exports = f(function () {
						return { value: this };
					});
				},
				"to-descriptors.js": function (exports, module, require) {
					// Return hash of descriptors for hash of values.
					// Shortcut for defining non enumerable, non writeable & non configurable
					// properties

					'use strict';

					var f        = require('../Function/functionalize')
					  , describe = require('./to-descriptor').call
					  , omap     = require('./plain/map').call;

					module.exports = f(function () {
						return omap(this, describe);
					});
				},
				"to-string": {
					"call.js": function (exports, module, require) {
						// call binded to Object.prototype.toString

						'use strict';

						module.exports = require('../../Function/call/bind')(Object.prototype.toString);
					},
					"index.js": function (exports, module, require) {
						'use strict';

						module.exports = {
							call: require('./call')
						};
					}
				}
			},
			"RegExp": {
				"index.js": function (exports, module, require) {
					'use strict';

					module.exports = {
						isRegExp: require('./is-reg-exp')
					};
				},
				"is-reg-exp.js": function (exports, module, require) {
					// Whether object is regular expression

					'use strict';

					var toString = require('../Object/to-string/call')

					  , id = toString(/a/);

					module.exports = function (x) {
						if (!x) {
							return false;
						}
						return x instanceof RegExp || (toString(x) === id) || false;
					};
				}
			},
			"String": {
				"auto-id.js": function (exports, module, require) {
					// Generate incremented id

					module.exports = function (prefix, postfix) {
						var index = -1;
						prefix = prefix || '';
						postfix = postfix || '';
						return function () {
							return prefix + (++index).toString(36) + postfix;
						};
					};
				},
				"contains.js": function (exports, module, require) {
					// Whether string contains given string
					//
					// Name inspired by Closure library: http://closure-library.googlecode.com/svn/trunk/closure/goog/string/string.js

					'use strict';

					var f       = require('../Function/functionalize');

					module.exports = f(function (x) {
						return this.indexOf(x) > -1;
					});
				},
				"convert": {
					"dash-to-camel-case.js": function (exports, module, require) {
						// Convert dash separated string to camelCase
						// e.g. one-two-three -> oneTwoThree

						'use strict';

						var replace = function (m, a) { return a.toUpperCase(); };
						module.exports = function (str) {
							return str.replace(/-([a-z0-9])/g, replace);
						};
					},
					"index.js": function (exports, module, require) {
						// Export all modules.
						// We could as well scan file system but it won't work in browser environment.

						'use strict';

						module.exports = {
							dashToCamelCase: require('./dash-to-camel-case')
						};
					}
				},
				"ends-with.js": function (exports, module, require) {
					// Whether strings ends with given string

					'use strict';

					var f = require('../Function/functionalize');

					module.exports = f(function (needle) {
						var index = this.lastIndexOf(needle);
						return (index !== -1) && (index === (this.length - needle.length));
					});
				},
				"format.js": function (exports, module, require) {
					// String format

					'use strict';

					var f          = require('../Function/functionalize')
					  , isFunction = require('../Function/is-function');

					module.exports = function (fmap) {
						return f(function (scope) {
							var t, fn;
							return this.replace(/%([a-zA-Z]+)|\\(.)/g, function (match, token, escape) {
								if (escape) {
									return escape;
								} else {
									t = token;
									while (t && !(fn = fmap[t])) {
										t = t.slice(0, -1);
									}
									return fn ? (isFunction(fn) ? fn.call(scope) : fn)
										+ token.slice(t.length) : match;
								}
							});
						});
					};
				},
				"guid.js": function (exports, module, require) {
					// Generates globally unique identifier
					// Simple and friendly implementation for average web application purpose
					// it's not on pair with more advanced concept:
					// http://en.wikipedia.org/wiki/Globally_unique_identifier

					var now   = Date.now
					  , start = Date.UTC(2011, 8, 21)
					  , salt  = Math.floor(Math.random()*36).toString(36)
					  , generated = {};

					module.exports = function () {
						var id = now() - start;
						while (generated.hasOwnProperty(id)) ++id;
						generated[id] = true;
						return id.toString(36) + salt;
					};
				},
				"indent.js": function (exports, module, require) {
					'use strict';

					var f      = require('../Function/functionalize')
					  , global = require('../global')
					  , repeat = require('./repeat').call;

					module.exports = f(function () {
						var token = (this && (this !== global)) ? this : '\t';
						return f(function (nest, nostart) {
							var ltoken;
							if (nest == null) {
								nest = 1;
							} else if (!nest) {
								return this;
							}
							ltoken = repeat(token, nest);
							var r = (nostart ? '' : ltoken) + this.replace(/\n([^\n]+)/g, '\n' + ltoken + '$1');
							return r;
						});
					});
				},
				"index.js": function (exports, module, require) {
					'use strict';

					module.exports = {
						autoId:                   require('./auto-id'),
						contains:                 require('./contains'),
						convert:                  require('./convert'),
						endsWith:                 require('./ends-with'),
						format:                   require('./format'),
						guid:                     require('./guid'),
						indent:                   require('./indent'),
						isNumeric:                require('./is-numeric'),
						isString:                 require('./is-string'),
						localeCompareInsensitive: require('./locale-compare-insensitive'),
						pad:                      require('./pad'),
						padRight:                 require('./pad-right'),
						prefix:                   require('./prefix'),
						repeat:                   require('./repeat'),
						startsWith:               require('./starts-with'),
						trimLeftStr:              require('./trim-left-str'),
						trimRightStr:             require('./trim-right-str')
					};
				},
				"is-numeric.js": function (exports, module, require) {
					// Whether string represents number

					'use strict';

					var f = require('../Function/functionalize');

					module.exports = f(function () {
						return !isNaN(Number(this));
					});
				},
				"is-string.js": function (exports, module, require) {
					// Whether object is string

					'use strict';

					var toString = require('../Object/to-string/call')

					  , id = toString('');

					module.exports = function (x) {
						return (typeof x === 'string') || (x && (typeof x == 'object') &&
							((x instanceof String) || (toString(x) === id))) || false;
					};
				},
				"locale-compare-insensitive.js": function (exports, module, require) {
					// localeCompare case insensitive

					'use strict';

					var f = require('../Function/functionalize');

					module.exports = f(function (other) {
						return this.toLowerCase().localeCompare(other.toLowerCase());
					});
				},
				"pad-right.js": function (exports, module, require) {
					// Makes string at least n characters long.
					// If it's shorter than it's padded right with repeated pregiven string

					'use strict';

					var f      = require('../Function/functionalize')
					  , repeat = require('./repeat').call;

					module.exports = f(function (n) {
						var fill = repeat(this, n);
						return f(function () {
							return this + fill.slice(0, Math.max(0, n - this.length));
						});
					});
				},
				"pad.js": function (exports, module, require) {
					// Makes string at least n characters long.
					// If it's shorter than it's padded with repeated pregiven string

					'use strict';

					var f      = require('../Function/functionalize')
					  , repeat = require('./repeat').call;

					module.exports = f(function (n) {
						var fill = repeat(this, n);
						return f(function () {
							return fill.slice(0, Math.max(0, n - this.length)) + this;
						});
					});
				},
				"prefix.js": function (exports, module, require) {
					// Prefix string with other string

					'use strict';

					var f = require('../Function/functionalize');

					module.exports = function (prefix) {
						return f(function () {
							return prefix + this;
						});
					};
				},
				"repeat.js": function (exports, module, require) {
					// Repeat given string n times
					//
					// Not rocket science but taken from:
					// http://closure-library.googlecode.com/svn/trunk/closure/goog/string/string.js

					'use strict';

					var f = require('../Function/functionalize');

					module.exports = f(function (n) {
						return new Array(n + 1).join(this);
					});
				},
				"starts-with.js": function (exports, module, require) {
					// Whether strings starts with given string

					'use strict';

					var f = require('../Function/functionalize');

					module.exports = f(function (needle) {
						return this.indexOf(needle) === 0;
					});
				},
				"trim-left-str.js": function (exports, module, require) {
					// If given string matches begininng of scope string,
					// trim left string by its length

					'use strict';

					var f = require('../Function/functionalize');

					module.exports = f(function (s) {
						var l = s.length;
						return (this.slice(0, l) === s) ? this.slice(l) : this;
					});
				},
				"trim-right-str.js": function (exports, module, require) {
					// If given string matches end of scope string,
					// trim right string by its length

					'use strict';

					var f = require('../Function/functionalize');

					module.exports = f(function (s) {
						var l = s.length;
						return (this.slice(-l) === s) ? this.slice(0, -l) : this;
					});
				}
			},
			"global.js": function (exports, module, require) {
				// Get global object

				'use strict';

				module.exports = Function("return this")();
			},
			"index.js": function (exports, module, require) {
				// Export all modules.
				// We could as well scan file system but it won't work in browser environment.

				'use strict';

				module.exports = {
					global:      require('./global'),
					isPrimitive: require('./is-primitive'),
					reserved:    require('./reserved'),

					Array:       require('./Array'),
					Boolean:     require('./Boolean'),
					Date:        require('./Date'),
					Error:       require('./Error'),
					Function:    require('./Function'),
					List:        require('./List'),
					Number:      require('./Number'),
					Object:      require('./Object'),
					RegExp:      require('./RegExp'),
					String:      require('./String')
				};
			},
			"is-primitive.js": function (exports, module, require) {
				// Whether given object is primitive

				'use strict';

				var setTrue = require('./Object/plain/set-value').curry(true)

				  , map

				['boolean', 'number', 'string'].forEach(setTrue, map = {});

				module.exports = function (x) {
					return map[typeof x] || (x == null);
				};
			},
			"reserved.js": function (exports, module, require) {
				// List of EcmaScript 5th edition reserved keywords

				'use strict';

				var setTrue = require('./Object/plain/set-value').curry(true)
				  , elevate = require('./Object/plain/elevate').call;

				// 7.6.1.1 Keywords
				['break', 'case', 'catch', 'continue', 'debugger', 'default', 'delete', 'do',
					'else', 'finally', 'for', 'function', 'if', 'in', 'instanceof', 'new',
					'return', 'switch', 'this', 'throw', 'try', 'typeof', 'var', 'void', 'while',
					'with']
					.forEach(setTrue, exports.keywords = {});
				Object.freeze(exports.keywords);

				// 7.6.1.2 Future Reserved Words
				['class', 'const', 'enum', 'exports', 'extends', 'import', 'super']
					.forEach(setTrue, exports.future = {});
				Object.freeze(exports.future);

				// Future Reserved Words (only in strict mode)
				['implements', 'interface', 'let', 'package', 'private', 'protected', 'public',
					'static', 'yield']
					.forEach(setTrue, exports.futureStrict = {});
				Object.freeze(exports.futureStrict);

				Object.freeze(exports.all = elevate(exports));
			}
		}
	},
	"vendor": {
		"cjs_exports.js": function (exports, module, require) {
			//exports node modules
			window.deferred = require('deferred');
			window.es5ext = require('es5-ext');
		}
	}
})
("vendor/cjs_exports");
